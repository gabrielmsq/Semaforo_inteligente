
Novas_funcionalidades.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00001ccc  00001d60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ccc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000211  0080018c  0080018c  00001dec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a0c  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000968  00000000  00000000  0000397c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f97  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  0000527c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  0000566c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000106b  00000000  00000000  00005cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00006d1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__ctors_end>
       4:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_1>
       8:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_2>
       c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      10:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      14:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__vector_5>
      18:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      1c:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__vector_7>
      20:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      24:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      28:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      2c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      34:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      38:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      3c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      40:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      44:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      48:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      4c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      50:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      54:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      58:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      5c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      60:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      64:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
      68:	5d 01       	movw	r10, r26
      6a:	ae 01       	movw	r20, r28
      6c:	01 02       	muls	r16, r17
      6e:	54 02       	muls	r21, r20
      70:	a7 02       	muls	r26, r23
      72:	fa 02       	muls	r31, r26
      74:	4d 03       	fmul	r20, r21
      76:	a0 03       	fmuls	r18, r16
      78:	f3 03       	fmuls	r23, r19

0000007a <CHARSET>:
      7a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      8a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      9a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      aa:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ba:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      ca:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      da:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      ea:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      fa:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     10a:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     11a:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     12a:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     13a:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     14a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     15a:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     16a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     17a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     18a:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     19a:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1aa:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ba:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1ca:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1da:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1ea:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1fa:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     20a:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     21a:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     22a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     23a:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     24a:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000025a <__ctors_end>:
     25a:	11 24       	eor	r1, r1
     25c:	1f be       	out	0x3f, r1	; 63
     25e:	cf ef       	ldi	r28, 0xFF	; 255
     260:	d8 e0       	ldi	r29, 0x08	; 8
     262:	de bf       	out	0x3e, r29	; 62
     264:	cd bf       	out	0x3d, r28	; 61

00000266 <__do_copy_data>:
     266:	11 e0       	ldi	r17, 0x01	; 1
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	ec ec       	ldi	r30, 0xCC	; 204
     26e:	fc e1       	ldi	r31, 0x1C	; 28
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
     272:	05 90       	lpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	ac 38       	cpi	r26, 0x8C	; 140
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
     27c:	23 e0       	ldi	r18, 0x03	; 3
     27e:	ac e8       	ldi	r26, 0x8C	; 140
     280:	b1 e0       	ldi	r27, 0x01	; 1
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	ad 39       	cpi	r26, 0x9D	; 157
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	0e 94 27 05 	call	0xa4e	; 0xa4e <main>
     290:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <_exit>

00000294 <__bad_interrupt>:
     294:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000298 <temporizador>:
    }
}

//Função de tempo q muda o estado de t quando percorrido o tempo 'time' selecionado 
//e o 'sel' habilita o tempo do led amarelo (multiplicando o tempo por 4)
void temporizador(uint8_t time, uint8_t *t, uint8_t sel) {
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
	static uint32_t t_anterior  = 0;
	
	switch(time){
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	fc 01       	movw	r30, r24
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	e9 30       	cpi	r30, 0x09	; 9
     2ac:	f1 05       	cpc	r31, r1
     2ae:	08 f0       	brcs	.+2      	; 0x2b2 <temporizador+0x1a>
     2b0:	eb c2       	rjmp	.+1494   	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     2b2:	ec 5c       	subi	r30, 0xCC	; 204
     2b4:	ff 4f       	sbci	r31, 0xFF	; 255
     2b6:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__tablejump2__>
		case 1:
			if(((tempo_ms - t_anterior) >= 250)&&sel){
     2ba:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     2be:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     2c2:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     2c6:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     2ca:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     2ce:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     2d2:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     2d6:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     2da:	68 01       	movw	r12, r16
     2dc:	79 01       	movw	r14, r18
     2de:	c8 1a       	sub	r12, r24
     2e0:	d9 0a       	sbc	r13, r25
     2e2:	ea 0a       	sbc	r14, r26
     2e4:	fb 0a       	sbc	r15, r27
     2e6:	d7 01       	movw	r26, r14
     2e8:	c6 01       	movw	r24, r12
     2ea:	8a 3f       	cpi	r24, 0xFA	; 250
     2ec:	91 05       	cpc	r25, r1
     2ee:	a1 05       	cpc	r26, r1
     2f0:	b1 05       	cpc	r27, r1
     2f2:	c0 f0       	brcs	.+48     	; 0x324 <temporizador+0x8c>
     2f4:	44 23       	and	r20, r20
     2f6:	b1 f0       	breq	.+44     	; 0x324 <temporizador+0x8c>
				aux+=1;
     2f8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     2fc:	8f 5f       	subi	r24, 0xFF	; 255
     2fe:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
				t_anterior= tempo_ms;
     302:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     306:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     30a:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     30e:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
				if(aux == 4){
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	09 f0       	breq	.+2      	; 0x318 <temporizador+0x80>
     316:	bb c2       	rjmp	.+1398   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	fb 01       	movw	r30, r22
     31c:	80 83       	st	Z, r24
					aux =0;
     31e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     322:	b5 c2       	rjmp	.+1386   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
					
			}else{
				if(((tempo_ms - t_anterior) >= 250)&& (sel==0)){
     324:	8a 3f       	cpi	r24, 0xFA	; 250
     326:	91 05       	cpc	r25, r1
     328:	a1 05       	cpc	r26, r1
     32a:	b1 05       	cpc	r27, r1
     32c:	08 f4       	brcc	.+2      	; 0x330 <temporizador+0x98>
     32e:	af c2       	rjmp	.+1374   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     330:	41 11       	cpse	r20, r1
     332:	ad c2       	rjmp	.+1370   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	fb 01       	movw	r30, r22
     338:	80 83       	st	Z, r24
					t_anterior = tempo_ms;
     33a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     33e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     342:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     346:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     34a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     34e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     352:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     356:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     35a:	99 c2       	rjmp	.+1330   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					}
			}
			break;
		case 2:
			if(((tempo_ms - t_anterior) >= 500) && sel){
     35c:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     360:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     364:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     368:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     36c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     370:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     374:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     378:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     37c:	68 01       	movw	r12, r16
     37e:	79 01       	movw	r14, r18
     380:	c8 1a       	sub	r12, r24
     382:	d9 0a       	sbc	r13, r25
     384:	ea 0a       	sbc	r14, r26
     386:	fb 0a       	sbc	r15, r27
     388:	d7 01       	movw	r26, r14
     38a:	c6 01       	movw	r24, r12
     38c:	54 ef       	ldi	r21, 0xF4	; 244
     38e:	c5 16       	cp	r12, r21
     390:	51 e0       	ldi	r21, 0x01	; 1
     392:	d5 06       	cpc	r13, r21
     394:	e1 04       	cpc	r14, r1
     396:	f1 04       	cpc	r15, r1
     398:	c0 f0       	brcs	.+48     	; 0x3ca <temporizador+0x132>
     39a:	44 23       	and	r20, r20
     39c:	b1 f0       	breq	.+44     	; 0x3ca <temporizador+0x132>
				aux+=1;
     39e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
				t_anterior = tempo_ms;
     3a8:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     3ac:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     3b0:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     3b4:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
				if(aux == 4){
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	09 f0       	breq	.+2      	; 0x3be <temporizador+0x126>
     3bc:	68 c2       	rjmp	.+1232   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	fb 01       	movw	r30, r22
     3c2:	80 83       	st	Z, r24
					aux =0;
     3c4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     3c8:	62 c2       	rjmp	.+1220   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			else{
				if(((tempo_ms - t_anterior) >= 500)&& (sel==0)){
     3ca:	84 3f       	cpi	r24, 0xF4	; 244
     3cc:	91 40       	sbci	r25, 0x01	; 1
     3ce:	a1 05       	cpc	r26, r1
     3d0:	b1 05       	cpc	r27, r1
     3d2:	08 f4       	brcc	.+2      	; 0x3d6 <temporizador+0x13e>
     3d4:	5c c2       	rjmp	.+1208   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     3d6:	41 11       	cpse	r20, r1
     3d8:	5a c2       	rjmp	.+1204   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	fb 01       	movw	r30, r22
     3de:	80 83       	st	Z, r24
					t_anterior = tempo_ms;
     3e0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     3e4:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     3e8:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     3ec:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     3f0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     3f4:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     3f8:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     3fc:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     400:	46 c2       	rjmp	.+1164   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			break;
		case 3:
		if(((tempo_ms - t_anterior) >= 750) && sel){
     402:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     406:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     40a:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     40e:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     412:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     416:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     41a:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     41e:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     422:	68 01       	movw	r12, r16
     424:	79 01       	movw	r14, r18
     426:	c8 1a       	sub	r12, r24
     428:	d9 0a       	sbc	r13, r25
     42a:	ea 0a       	sbc	r14, r26
     42c:	fb 0a       	sbc	r15, r27
     42e:	d7 01       	movw	r26, r14
     430:	c6 01       	movw	r24, r12
     432:	5e ee       	ldi	r21, 0xEE	; 238
     434:	c5 16       	cp	r12, r21
     436:	52 e0       	ldi	r21, 0x02	; 2
     438:	d5 06       	cpc	r13, r21
     43a:	e1 04       	cpc	r14, r1
     43c:	f1 04       	cpc	r15, r1
     43e:	c0 f0       	brcs	.+48     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     440:	44 23       	and	r20, r20
     442:	b1 f0       	breq	.+44     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			aux+=1;
     444:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
			t_anterior= tempo_ms;
     44e:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     452:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     456:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     45a:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
			if(aux == 4){
     45e:	84 30       	cpi	r24, 0x04	; 4
     460:	09 f0       	breq	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     462:	15 c2       	rjmp	.+1066   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				*t = 1;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	fb 01       	movw	r30, r22
     468:	80 83       	st	Z, r24
				aux =0;
     46a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     46e:	0f c2       	rjmp	.+1054   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
			}
		}
		else{
			if(((tempo_ms - t_anterior) >= 750)&& (sel==0)){
     470:	8e 3e       	cpi	r24, 0xEE	; 238
     472:	92 40       	sbci	r25, 0x02	; 2
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	08 f4       	brcc	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     47a:	09 c2       	rjmp	.+1042   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     47c:	41 11       	cpse	r20, r1
     47e:	07 c2       	rjmp	.+1038   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
			*t = 1;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	fb 01       	movw	r30, r22
     484:	80 83       	st	Z, r24
			t_anterior= tempo_ms;
     486:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     48a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     48e:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     492:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     496:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     49a:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     49e:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     4a2:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     4a6:	f3 c1       	rjmp	.+998    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
			}
		}
		break;
		case 4:
			if(((tempo_ms - t_anterior) >= 1000) && sel){
     4a8:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     4ac:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     4b0:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     4b4:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     4b8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     4bc:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     4c0:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     4c4:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     4c8:	68 01       	movw	r12, r16
     4ca:	79 01       	movw	r14, r18
     4cc:	c8 1a       	sub	r12, r24
     4ce:	d9 0a       	sbc	r13, r25
     4d0:	ea 0a       	sbc	r14, r26
     4d2:	fb 0a       	sbc	r15, r27
     4d4:	d7 01       	movw	r26, r14
     4d6:	c6 01       	movw	r24, r12
     4d8:	58 ee       	ldi	r21, 0xE8	; 232
     4da:	c5 16       	cp	r12, r21
     4dc:	53 e0       	ldi	r21, 0x03	; 3
     4de:	d5 06       	cpc	r13, r21
     4e0:	e1 04       	cpc	r14, r1
     4e2:	f1 04       	cpc	r15, r1
     4e4:	c0 f0       	brcs	.+48     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     4e6:	44 23       	and	r20, r20
     4e8:	b1 f0       	breq	.+44     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
				aux+=1;
     4ea:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
				t_anterior= tempo_ms;
     4f4:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     4f8:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     4fc:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     500:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
				if(aux == 4){
     504:	84 30       	cpi	r24, 0x04	; 4
     506:	09 f0       	breq	.+2      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
     508:	c2 c1       	rjmp	.+900    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	fb 01       	movw	r30, r22
     50e:	80 83       	st	Z, r24
					aux =0;
     510:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     514:	bc c1       	rjmp	.+888    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			else{
				if(((tempo_ms - t_anterior) >= 1000)&& (sel==0)){
     516:	88 3e       	cpi	r24, 0xE8	; 232
     518:	93 40       	sbci	r25, 0x03	; 3
     51a:	a1 05       	cpc	r26, r1
     51c:	b1 05       	cpc	r27, r1
     51e:	08 f4       	brcc	.+2      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
     520:	b6 c1       	rjmp	.+876    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     522:	41 11       	cpse	r20, r1
     524:	b4 c1       	rjmp	.+872    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	fb 01       	movw	r30, r22
     52a:	80 83       	st	Z, r24
					t_anterior= tempo_ms;
     52c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     530:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     534:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     538:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     53c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     540:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     544:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     548:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     54c:	a0 c1       	rjmp	.+832    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					}
			}
			break;
		case 5:
			if(((tempo_ms - t_anterior) >= 1250) && sel ){
     54e:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     552:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     556:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     55a:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     55e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     562:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     566:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     56a:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     56e:	68 01       	movw	r12, r16
     570:	79 01       	movw	r14, r18
     572:	c8 1a       	sub	r12, r24
     574:	d9 0a       	sbc	r13, r25
     576:	ea 0a       	sbc	r14, r26
     578:	fb 0a       	sbc	r15, r27
     57a:	d7 01       	movw	r26, r14
     57c:	c6 01       	movw	r24, r12
     57e:	52 ee       	ldi	r21, 0xE2	; 226
     580:	c5 16       	cp	r12, r21
     582:	54 e0       	ldi	r21, 0x04	; 4
     584:	d5 06       	cpc	r13, r21
     586:	e1 04       	cpc	r14, r1
     588:	f1 04       	cpc	r15, r1
     58a:	c0 f0       	brcs	.+48     	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
     58c:	44 23       	and	r20, r20
     58e:	b1 f0       	breq	.+44     	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
				aux+=1;
     590:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
				t_anterior= tempo_ms;
     59a:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     59e:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     5a2:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     5a6:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
				if(aux == 4){
     5aa:	84 30       	cpi	r24, 0x04	; 4
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     5ae:	6f c1       	rjmp	.+734    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	fb 01       	movw	r30, r22
     5b4:	80 83       	st	Z, r24
					aux =0;
     5b6:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     5ba:	69 c1       	rjmp	.+722    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			else{
				if(((tempo_ms - t_anterior) >= 1250)&& (sel==0)){
     5bc:	82 3e       	cpi	r24, 0xE2	; 226
     5be:	94 40       	sbci	r25, 0x04	; 4
     5c0:	a1 05       	cpc	r26, r1
     5c2:	b1 05       	cpc	r27, r1
     5c4:	08 f4       	brcc	.+2      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
     5c6:	63 c1       	rjmp	.+710    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     5c8:	41 11       	cpse	r20, r1
     5ca:	61 c1       	rjmp	.+706    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				*t = 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	fb 01       	movw	r30, r22
     5d0:	80 83       	st	Z, r24
				t_anterior= tempo_ms;
     5d2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     5d6:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     5da:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     5de:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     5e2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     5e6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     5ea:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     5ee:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     5f2:	4d c1       	rjmp	.+666    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			break;
		case 6:
			if(((tempo_ms - t_anterior) >= 1500) && sel){
     5f4:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     5f8:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     5fc:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     600:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     604:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     608:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     60c:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     610:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     614:	68 01       	movw	r12, r16
     616:	79 01       	movw	r14, r18
     618:	c8 1a       	sub	r12, r24
     61a:	d9 0a       	sbc	r13, r25
     61c:	ea 0a       	sbc	r14, r26
     61e:	fb 0a       	sbc	r15, r27
     620:	d7 01       	movw	r26, r14
     622:	c6 01       	movw	r24, r12
     624:	5c ed       	ldi	r21, 0xDC	; 220
     626:	c5 16       	cp	r12, r21
     628:	55 e0       	ldi	r21, 0x05	; 5
     62a:	d5 06       	cpc	r13, r21
     62c:	e1 04       	cpc	r14, r1
     62e:	f1 04       	cpc	r15, r1
     630:	c0 f0       	brcs	.+48     	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
     632:	44 23       	and	r20, r20
     634:	b1 f0       	breq	.+44     	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
				aux+=1;
     636:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
				t_anterior= tempo_ms;
     640:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     644:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     648:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     64c:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
				if(aux == 4){
     650:	84 30       	cpi	r24, 0x04	; 4
     652:	09 f0       	breq	.+2      	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
     654:	1c c1       	rjmp	.+568    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	fb 01       	movw	r30, r22
     65a:	80 83       	st	Z, r24
					aux =0;
     65c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     660:	16 c1       	rjmp	.+556    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			else{
				if(((tempo_ms - t_anterior) >= 1500)&& (sel==0)){
     662:	8c 3d       	cpi	r24, 0xDC	; 220
     664:	95 40       	sbci	r25, 0x05	; 5
     666:	a1 05       	cpc	r26, r1
     668:	b1 05       	cpc	r27, r1
     66a:	08 f4       	brcc	.+2      	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
     66c:	10 c1       	rjmp	.+544    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     66e:	41 11       	cpse	r20, r1
     670:	0e c1       	rjmp	.+540    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	fb 01       	movw	r30, r22
     676:	80 83       	st	Z, r24
					t_anterior= tempo_ms;
     678:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     67c:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     680:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     684:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     688:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     68c:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     690:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     694:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     698:	fa c0       	rjmp	.+500    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			break;
		case 7:
			if(((tempo_ms - t_anterior) >= 1750) && sel){
     69a:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     69e:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     6a2:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     6a6:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     6aa:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     6ae:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     6b2:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     6b6:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     6ba:	68 01       	movw	r12, r16
     6bc:	79 01       	movw	r14, r18
     6be:	c8 1a       	sub	r12, r24
     6c0:	d9 0a       	sbc	r13, r25
     6c2:	ea 0a       	sbc	r14, r26
     6c4:	fb 0a       	sbc	r15, r27
     6c6:	d7 01       	movw	r26, r14
     6c8:	c6 01       	movw	r24, r12
     6ca:	56 ed       	ldi	r21, 0xD6	; 214
     6cc:	c5 16       	cp	r12, r21
     6ce:	56 e0       	ldi	r21, 0x06	; 6
     6d0:	d5 06       	cpc	r13, r21
     6d2:	e1 04       	cpc	r14, r1
     6d4:	f1 04       	cpc	r15, r1
     6d6:	c0 f0       	brcs	.+48     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
     6d8:	44 23       	and	r20, r20
     6da:	b1 f0       	breq	.+44     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
				aux+=1;
     6dc:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
				t_anterior= tempo_ms;
     6e6:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     6ea:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     6ee:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     6f2:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
				if(aux == 4){
     6f6:	84 30       	cpi	r24, 0x04	; 4
     6f8:	09 f0       	breq	.+2      	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
     6fa:	c9 c0       	rjmp	.+402    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	fb 01       	movw	r30, r22
     700:	80 83       	st	Z, r24
					aux =0;
     702:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     706:	c3 c0       	rjmp	.+390    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			else{
				if(((tempo_ms - t_anterior) >= 1750)&& (sel==0)){
     708:	86 3d       	cpi	r24, 0xD6	; 214
     70a:	96 40       	sbci	r25, 0x06	; 6
     70c:	a1 05       	cpc	r26, r1
     70e:	b1 05       	cpc	r27, r1
     710:	08 f4       	brcc	.+2      	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
     712:	bd c0       	rjmp	.+378    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     714:	41 11       	cpse	r20, r1
     716:	bb c0       	rjmp	.+374    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	fb 01       	movw	r30, r22
     71c:	80 83       	st	Z, r24
					t_anterior= tempo_ms;
     71e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     722:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     726:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     72a:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     72e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     732:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     736:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     73a:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     73e:	a7 c0       	rjmp	.+334    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			break;
		case 8:
			if(((tempo_ms - t_anterior) >= 2000)&& sel){
     740:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     744:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     748:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     74c:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     750:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     754:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     758:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     75c:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     760:	68 01       	movw	r12, r16
     762:	79 01       	movw	r14, r18
     764:	c8 1a       	sub	r12, r24
     766:	d9 0a       	sbc	r13, r25
     768:	ea 0a       	sbc	r14, r26
     76a:	fb 0a       	sbc	r15, r27
     76c:	d7 01       	movw	r26, r14
     76e:	c6 01       	movw	r24, r12
     770:	50 ed       	ldi	r21, 0xD0	; 208
     772:	c5 16       	cp	r12, r21
     774:	57 e0       	ldi	r21, 0x07	; 7
     776:	d5 06       	cpc	r13, r21
     778:	e1 04       	cpc	r14, r1
     77a:	f1 04       	cpc	r15, r1
     77c:	c0 f0       	brcs	.+48     	; 0x7ae <__EEPROM_REGION_LENGTH__+0x3ae>
     77e:	44 23       	and	r20, r20
     780:	b1 f0       	breq	.+44     	; 0x7ae <__EEPROM_REGION_LENGTH__+0x3ae>
				aux+=1;
     782:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     786:	8f 5f       	subi	r24, 0xFF	; 255
     788:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
				t_anterior= tempo_ms;
     78c:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     790:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     794:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     798:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
				if(aux == 4){
     79c:	84 30       	cpi	r24, 0x04	; 4
     79e:	09 f0       	breq	.+2      	; 0x7a2 <__EEPROM_REGION_LENGTH__+0x3a2>
     7a0:	76 c0       	rjmp	.+236    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	fb 01       	movw	r30, r22
     7a6:	80 83       	st	Z, r24
					aux =0;
     7a8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     7ac:	70 c0       	rjmp	.+224    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			else{
				if(((tempo_ms - t_anterior) >= 2000)&& (sel==0)){
     7ae:	80 3d       	cpi	r24, 0xD0	; 208
     7b0:	97 40       	sbci	r25, 0x07	; 7
     7b2:	a1 05       	cpc	r26, r1
     7b4:	b1 05       	cpc	r27, r1
     7b6:	08 f4       	brcc	.+2      	; 0x7ba <__EEPROM_REGION_LENGTH__+0x3ba>
     7b8:	6a c0       	rjmp	.+212    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     7ba:	41 11       	cpse	r20, r1
     7bc:	68 c0       	rjmp	.+208    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	fb 01       	movw	r30, r22
     7c2:	80 83       	st	Z, r24
					t_anterior= tempo_ms;
     7c4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     7c8:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     7cc:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     7d0:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     7d4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     7d8:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     7dc:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     7e0:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     7e4:	54 c0       	rjmp	.+168    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			break;
		case 9:
			if(((tempo_ms - t_anterior) >= 2250) && sel){
     7e6:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <tempo_ms>
     7ea:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <tempo_ms+0x1>
     7ee:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tempo_ms+0x2>
     7f2:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <tempo_ms+0x3>
     7f6:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <t_anterior.2214>
     7fa:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <t_anterior.2214+0x1>
     7fe:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <t_anterior.2214+0x2>
     802:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <t_anterior.2214+0x3>
     806:	68 01       	movw	r12, r16
     808:	79 01       	movw	r14, r18
     80a:	c8 1a       	sub	r12, r24
     80c:	d9 0a       	sbc	r13, r25
     80e:	ea 0a       	sbc	r14, r26
     810:	fb 0a       	sbc	r15, r27
     812:	d7 01       	movw	r26, r14
     814:	c6 01       	movw	r24, r12
     816:	5a ec       	ldi	r21, 0xCA	; 202
     818:	c5 16       	cp	r12, r21
     81a:	58 e0       	ldi	r21, 0x08	; 8
     81c:	d5 06       	cpc	r13, r21
     81e:	e1 04       	cpc	r14, r1
     820:	f1 04       	cpc	r15, r1
     822:	b8 f0       	brcs	.+46     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     824:	44 23       	and	r20, r20
     826:	a9 f0       	breq	.+42     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
				aux+=1;
     828:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <aux>
     82c:	8f 5f       	subi	r24, 0xFF	; 255
     82e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <aux>
				t_anterior= tempo_ms;
     832:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <t_anterior.2214>
     836:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <t_anterior.2214+0x1>
     83a:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <t_anterior.2214+0x2>
     83e:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <t_anterior.2214+0x3>
				if(aux == 4){
     842:	84 30       	cpi	r24, 0x04	; 4
     844:	21 f5       	brne	.+72     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	fb 01       	movw	r30, r22
     84a:	80 83       	st	Z, r24
					aux =0;
     84c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <aux>
     850:	1e c0       	rjmp	.+60     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			else{
				if(((tempo_ms - t_anterior) >= 2500)&& (sel==0)){
     852:	84 3c       	cpi	r24, 0xC4	; 196
     854:	99 40       	sbci	r25, 0x09	; 9
     856:	a1 05       	cpc	r26, r1
     858:	b1 05       	cpc	r27, r1
     85a:	c8 f0       	brcs	.+50     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     85c:	41 11       	cpse	r20, r1
     85e:	17 c0       	rjmp	.+46     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
					*t = 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	fb 01       	movw	r30, r22
     864:	80 83       	st	Z, r24
					t_anterior= tempo_ms;
     866:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tempo_ms>
     86a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tempo_ms+0x1>
     86e:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <tempo_ms+0x2>
     872:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <tempo_ms+0x3>
     876:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <t_anterior.2214>
     87a:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <t_anterior.2214+0x1>
     87e:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <t_anterior.2214+0x2>
     882:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <t_anterior.2214+0x3>
     886:	03 c0       	rjmp	.+6      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				}
			}
			break;
			default:
				*t =1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	fb 01       	movw	r30, r22
     88c:	80 83       	st	Z, r24
	}
}
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	08 95       	ret

0000089c <teste_botao>:

//Função para teste do botão + -, e Mudar para modo Automático
void teste_botao(uint8_t *num){
	
	if(!(PIND & 0b00010000)) //Retorna 1 se PD4 for 1 e 0 se PD4 for 0
     89c:	4c 99       	sbic	0x09, 4	; 9
     89e:	15 c0       	rjmp	.+42     	; 0x8ca <teste_botao+0x2e>
	{	
		if(!botao){
     8a0:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <botao>
     8a4:	21 11       	cpse	r18, r1
     8a6:	0a c0       	rjmp	.+20     	; 0x8bc <teste_botao+0x20>
			if(!M_A)
     8a8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <M_A>
     8ac:	81 11       	cpse	r24, r1
     8ae:	23 c0       	rjmp	.+70     	; 0x8f6 <teste_botao+0x5a>
				M_A = !M_A;
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	81 11       	cpse	r24, r1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <M_A>
     8ba:	08 95       	ret
		}else
			if(*num < 9 )
     8bc:	fc 01       	movw	r30, r24
     8be:	20 81       	ld	r18, Z
     8c0:	29 30       	cpi	r18, 0x09	; 9
     8c2:	c8 f4       	brcc	.+50     	; 0x8f6 <teste_botao+0x5a>
			{
				*num+=1;
     8c4:	2f 5f       	subi	r18, 0xFF	; 255
     8c6:	20 83       	st	Z, r18
     8c8:	08 95       	ret
			}
		
	}else{
		if(!(PIND & 0b00100000))//Retorna 1 se PD5 for 1 e 0 se PD5 for 0
     8ca:	4d 99       	sbic	0x09, 5	; 9
     8cc:	14 c0       	rjmp	.+40     	; 0x8f6 <teste_botao+0x5a>
		{
			if(!botao){
     8ce:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <botao>
     8d2:	21 11       	cpse	r18, r1
     8d4:	0a c0       	rjmp	.+20     	; 0x8ea <teste_botao+0x4e>
				if(M_A)
     8d6:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <M_A>
     8da:	88 23       	and	r24, r24
     8dc:	61 f0       	breq	.+24     	; 0x8f6 <teste_botao+0x5a>
					M_A = !M_A;
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	81 11       	cpse	r24, r1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <M_A>
     8e8:	08 95       	ret
			}else
				if(*num > 1)
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 81       	ld	r18, Z
     8ee:	22 30       	cpi	r18, 0x02	; 2
     8f0:	10 f0       	brcs	.+4      	; 0x8f6 <teste_botao+0x5a>
				{
					*num-=1;
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	20 83       	st	Z, r18
     8f6:	08 95       	ret

000008f8 <semaforo>:
		}
	}
}

//Muda o estado dos leds do semaforo
void semaforo( uint8_t *i,uint8_t t_red,uint8_t t_green, uint8_t t_yellow,uint8_t *tr, uint8_t *tg, uint8_t *ty){
     8f8:	af 92       	push	r10
     8fa:	bf 92       	push	r11
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	29 97       	sbiw	r28, 0x09	; 9
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	5c 01       	movw	r10, r24
     91e:	36 2f       	mov	r19, r22
     920:	84 2f       	mov	r24, r20
	
	uint8_t port[9] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
     922:	99 e0       	ldi	r25, 0x09	; 9
     924:	e3 e0       	ldi	r30, 0x03	; 3
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	de 01       	movw	r26, r28
     92a:	11 96       	adiw	r26, 0x01	; 1
     92c:	01 90       	ld	r0, Z+
     92e:	0d 92       	st	X+, r0
     930:	9a 95       	dec	r25
     932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0x2d>
	if(samu == 0 && acidente == 0){
     934:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <samu>
     938:	91 11       	cpse	r25, r1
     93a:	52 c0       	rjmp	.+164    	; 0x9e0 <__stack+0xe1>
     93c:	40 91 9f 01 	lds	r20, 0x019F	; 0x80019f <acidente>
     940:	41 11       	cpse	r20, r1
     942:	4e c0       	rjmp	.+156    	; 0x9e0 <__stack+0xe1>
		if(*i <=3 ){
     944:	f5 01       	movw	r30, r10
     946:	90 81       	ld	r25, Z
     948:	94 30       	cpi	r25, 0x04	; 4
     94a:	c0 f4       	brcc	.+48     	; 0x97c <__stack+0x7d>
			PORTB = port[*i];
     94c:	e1 e0       	ldi	r30, 0x01	; 1
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	ec 0f       	add	r30, r28
     952:	fd 1f       	adc	r31, r29
     954:	e9 0f       	add	r30, r25
     956:	f1 1d       	adc	r31, r1
     958:	80 81       	ld	r24, Z
     95a:	85 b9       	out	0x05, r24	; 5
			temporizador(t_red, tr,0);
     95c:	b8 01       	movw	r22, r16
     95e:	83 2f       	mov	r24, r19
     960:	0e 94 4c 01 	call	0x298	; 0x298 <temporizador>
				if(*tr == 1){
     964:	f8 01       	movw	r30, r16
     966:	80 81       	ld	r24, Z
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	09 f0       	breq	.+2      	; 0x96e <__stack+0x6f>
     96c:	5f c0       	rjmp	.+190    	; 0xa2c <__stack+0x12d>
					*i+=1;
     96e:	f5 01       	movw	r30, r10
     970:	80 81       	ld	r24, Z
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	80 83       	st	Z, r24
					*tr = 0;
     976:	f8 01       	movw	r30, r16
     978:	10 82       	st	Z, r1
     97a:	58 c0       	rjmp	.+176    	; 0xa2c <__stack+0x12d>
					}
		}else 
			if(*i >3 && *i<=7){
     97c:	3c ef       	ldi	r19, 0xFC	; 252
     97e:	39 0f       	add	r19, r25
     980:	34 30       	cpi	r19, 0x04	; 4
     982:	c0 f4       	brcc	.+48     	; 0x9b4 <__stack+0xb5>
				PORTB = port[*i];
     984:	e1 e0       	ldi	r30, 0x01	; 1
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	ec 0f       	add	r30, r28
     98a:	fd 1f       	adc	r31, r29
     98c:	e9 0f       	add	r30, r25
     98e:	f1 1d       	adc	r31, r1
     990:	90 81       	ld	r25, Z
     992:	95 b9       	out	0x05, r25	; 5
				temporizador(t_green, tg,0);
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	b7 01       	movw	r22, r14
     998:	0e 94 4c 01 	call	0x298	; 0x298 <temporizador>
					if(*tg == 1){
     99c:	f7 01       	movw	r30, r14
     99e:	80 81       	ld	r24, Z
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	43 c0       	rjmp	.+134    	; 0xa2c <__stack+0x12d>
						*i+=1;
     9a6:	f5 01       	movw	r30, r10
     9a8:	80 81       	ld	r24, Z
     9aa:	8f 5f       	subi	r24, 0xFF	; 255
     9ac:	80 83       	st	Z, r24
						*tg =0;}
     9ae:	f7 01       	movw	r30, r14
     9b0:	10 82       	st	Z, r1
     9b2:	3c c0       	rjmp	.+120    	; 0xa2c <__stack+0x12d>
			}else{
					PORTB = port[*i];
     9b4:	e1 e0       	ldi	r30, 0x01	; 1
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	ec 0f       	add	r30, r28
     9ba:	fd 1f       	adc	r31, r29
     9bc:	e9 0f       	add	r30, r25
     9be:	f1 1d       	adc	r31, r1
     9c0:	80 81       	ld	r24, Z
     9c2:	85 b9       	out	0x05, r24	; 5
					temporizador(t_yellow, ty,1);
     9c4:	41 e0       	ldi	r20, 0x01	; 1
     9c6:	b6 01       	movw	r22, r12
     9c8:	82 2f       	mov	r24, r18
     9ca:	0e 94 4c 01 	call	0x298	; 0x298 <temporizador>
					if(*ty ==1){
     9ce:	f6 01       	movw	r30, r12
     9d0:	80 81       	ld	r24, Z
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	59 f5       	brne	.+86     	; 0xa2c <__stack+0x12d>
						*i = 0;
     9d6:	f5 01       	movw	r30, r10
     9d8:	10 82       	st	Z, r1
						*ty = 0;
     9da:	f6 01       	movw	r30, r12
     9dc:	10 82       	st	Z, r1
     9de:	26 c0       	rjmp	.+76     	; 0xa2c <__stack+0x12d>
					}
			
			}
		}else{
			if(samu == 1){
     9e0:	91 30       	cpi	r25, 0x01	; 1
     9e2:	99 f4       	brne	.+38     	; 0xa0a <__stack+0x10b>
				PORTB = port[4];
     9e4:	84 e0       	ldi	r24, 0x04	; 4
     9e6:	85 b9       	out	0x05, r24	; 5
				temporizador(9, tg,1);
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	b7 01       	movw	r22, r14
     9ec:	89 e0       	ldi	r24, 0x09	; 9
     9ee:	0e 94 4c 01 	call	0x298	; 0x298 <temporizador>
				if(*tg == 1){
     9f2:	f7 01       	movw	r30, r14
     9f4:	80 81       	ld	r24, Z
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	c9 f4       	brne	.+50     	; 0xa2c <__stack+0x12d>
					*tg =0;
     9fa:	10 82       	st	Z, r1
					samu = 0;
     9fc:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <samu>
					nokia_lcd_clear();
     a00:	0e 94 0d 0a 	call	0x141a	; 0x141a <nokia_lcd_clear>
					nokia_lcd_render();
     a04:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <nokia_lcd_render>
     a08:	11 c0       	rjmp	.+34     	; 0xa2c <__stack+0x12d>
				}
			}else{
				PORTB = port[0];
     a0a:	15 b8       	out	0x05, r1	; 5
				temporizador(9, tr,1);
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	b8 01       	movw	r22, r16
     a10:	89 e0       	ldi	r24, 0x09	; 9
     a12:	0e 94 4c 01 	call	0x298	; 0x298 <temporizador>
				if(*tr == 1){
     a16:	f8 01       	movw	r30, r16
     a18:	80 81       	ld	r24, Z
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	39 f4       	brne	.+14     	; 0xa2c <__stack+0x12d>
					*tr =0;
     a1e:	10 82       	st	Z, r1
					acidente = 0;
     a20:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <acidente>
					nokia_lcd_clear();
     a24:	0e 94 0d 0a 	call	0x141a	; 0x141a <nokia_lcd_clear>
					nokia_lcd_render();
     a28:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <nokia_lcd_render>
				}
			}
		}
		
}
     a2c:	29 96       	adiw	r28, 0x09	; 9
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	08 95       	ret

00000a4e <main>:
				OCR0A = 0;//Apaga a iluminação
	}
}

int main(void)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	00 d0       	rcall	.+0      	; 0xa54 <main+0x6>
     a54:	00 d0       	rcall	.+0      	; 0xa56 <main+0x8>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
    //Conficurações para interrução por timers
    TCCR2A = 0b00000010; // TC2 em operação CTC
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = 0b00000100; // TC2 com prescaler = 64. Overflow a cada 1ms = 64*(249+1)/16MHz
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    OCR2A = 249;//Austa o comparador para TC2 contar até 249
     a66:	29 ef       	ldi	r18, 0xF9	; 249
     a68:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    TIMSK2 = 0b00000010; // habilita a interrupção na igualdade de comparação com OCR2A
     a6c:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    
	DDRC = 0b11011110; //Habilita o pino PC5 como entrada
     a70:	9e ed       	ldi	r25, 0xDE	; 222
     a72:	97 b9       	out	0x07, r25	; 7
    DDRD = 0b01000000; // Habilita os pinos PD0..5,7 como entradas - Saída da PD6 para Iluminação  PD0 - Sensor de ambulâncias
     a74:	90 e4       	ldi	r25, 0x40	; 64
     a76:	9a b9       	out	0x0a, r25	; 10
    DDRB = 0b00001111; //Habilita os pinos PB0...4 como saidas
     a78:	9f e0       	ldi	r25, 0x0F	; 15
     a7a:	94 b9       	out	0x04, r25	; 4
    PORTD = 0b10111011; //Habilita os resistores de pull-up da entrada  PD0,1,3..5,7 - Saida em 0
     a7c:	9b eb       	ldi	r25, 0xBB	; 187
     a7e:	9b b9       	out	0x0b, r25	; 11
    
	//Registradores para interrupções dos botões +, -, s, A,E, e para entrada de pulso
    EICRA = 0b00001010;//Interrupção sensivel a borda de descida de PD3 e a borda de descida no PD2
     a80:	9a e0       	ldi	r25, 0x0A	; 10
     a82:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    EIMSK = 0b00000011;//Habilitação da interrupção INT1 e INT0
     a86:	93 e0       	ldi	r25, 0x03	; 3
     a88:	9d bb       	out	0x1d, r25	; 29
    PCICR = 0b00000100; // Interrupção externa da PORTD
     a8a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK2 = 0b00110011;// Habilita individualmente o PD0,4,5 como interrupção
     a8e:	93 e3       	ldi	r25, 0x33	; 51
     a90:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	
	//CONFIG. do ADC
	ADMUX = 0b01000101; //VCC como ref, canal 5
     a94:	95 e4       	ldi	r25, 0x45	; 69
     a96:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11100111; //Habilita o ADC- modo de conversão contínua - prescaler de 128
     a9a:	97 ee       	ldi	r25, 0xE7	; 231
     a9c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0x00; //modo de conversão contínua
     aa0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00100001;// Desabilita o PC5 como entrada digital
     aa4:	91 e2       	ldi	r25, 0x21	; 33
     aa6:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	//fast PWM, TOP = 0xFF, OC0A habilitado OC0A = PD6
	TCCR0A = 0b10000011; //PWM não invertido nos pinos  OC0A
     aaa:	93 e8       	ldi	r25, 0x83	; 131
     aac:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000100; //liga TC0, prescaler = 256, fpwm = f0sc/(256*prescaler) = 16MHz/(256*256) = 244.1Hz
     aae:	85 bd       	out	0x25, r24	; 37
	OCR0A = 77; //controle do ciclo ativo do PWM OC0A - duty = 77/256 = 30%
     ab0:	8d e4       	ldi	r24, 0x4D	; 77
     ab2:	87 bd       	out	0x27, r24	; 39
	
	
    sei();//Ativas as instruções
     ab4:	78 94       	sei
    
    nokia_lcd_init();//Inicializa o display
     ab6:	0e 94 b5 09 	call	0x136a	; 0x136a <nokia_lcd_init>
    uint8_t i = 0,tr =0,tg =0,ty =0;
     aba:	19 82       	std	Y+1, r1	; 0x01
     abc:	1a 82       	std	Y+2, r1	; 0x02
     abe:	1b 82       	std	Y+3, r1	; 0x03
     ac0:	1c 82       	std	Y+4, r1	; 0x04
	
    while (1)
    {
			semaforo(&i, t_red, t_green, t_yellow,&tr,&tg,&ty);	//Acende o semáforo		
     ac2:	ce 01       	movw	r24, r28
     ac4:	04 96       	adiw	r24, 0x04	; 4
     ac6:	6c 01       	movw	r12, r24
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	7c 01       	movw	r14, r24
     acc:	8e 01       	movw	r16, r28
     ace:	0e 5f       	subi	r16, 0xFE	; 254
     ad0:	1f 4f       	sbci	r17, 0xFF	; 255
     ad2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ad6:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <t_green>
     ada:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <t_red>
     ade:	02 97       	sbiw	r24, 0x02	; 2
     ae0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <semaforo>
     ae4:	ee cf       	rjmp	.-36     	; 0xac2 <main+0x74>

00000ae6 <display>:
		}
		
}

//Atualiza o tempo no display LCD	
void display(uint8_t t_red,uint8_t t_green, uint8_t t_yellow, uint8_t botao, uint16_t taxa){
     ae6:	bf 92       	push	r11
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	2a 97       	sbiw	r28, 0x0a	; 10
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	c8 2e       	mov	r12, r24
     b0a:	d4 2e       	mov	r13, r20
     b0c:	b2 2e       	mov	r11, r18
	unsigned char t_green_string[2];
	unsigned char t_red_string[2];
	unsigned char t_yellow_string[2];
	unsigned char taxa_string[4];
	
	sprintf(t_green_string,"%u",t_green);
     b0e:	1f 92       	push	r1
     b10:	6f 93       	push	r22
     b12:	0f 2e       	mov	r0, r31
     b14:	fc e0       	ldi	r31, 0x0C	; 12
     b16:	ef 2e       	mov	r14, r31
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	ff 2e       	mov	r15, r31
     b1c:	f0 2d       	mov	r31, r0
     b1e:	ff 92       	push	r15
     b20:	ef 92       	push	r14
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	9f 93       	push	r25
     b28:	8f 93       	push	r24
     b2a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sprintf>
	sprintf(t_red_string,"%u",t_red);
     b2e:	1f 92       	push	r1
     b30:	cf 92       	push	r12
     b32:	ff 92       	push	r15
     b34:	ef 92       	push	r14
     b36:	ce 01       	movw	r24, r28
     b38:	03 96       	adiw	r24, 0x03	; 3
     b3a:	9f 93       	push	r25
     b3c:	8f 93       	push	r24
     b3e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sprintf>
	sprintf(t_yellow_string,"%u",t_yellow);
     b42:	1f 92       	push	r1
     b44:	df 92       	push	r13
     b46:	ff 92       	push	r15
     b48:	ef 92       	push	r14
     b4a:	ce 01       	movw	r24, r28
     b4c:	05 96       	adiw	r24, 0x05	; 5
     b4e:	9f 93       	push	r25
     b50:	8f 93       	push	r24
     b52:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sprintf>
	
	sprintf(taxa_string,"%u",taxa);
     b56:	1f 93       	push	r17
     b58:	0f 93       	push	r16
     b5a:	ff 92       	push	r15
     b5c:	ef 92       	push	r14
     b5e:	ce 01       	movw	r24, r28
     b60:	07 96       	adiw	r24, 0x07	; 7
     b62:	9f 93       	push	r25
     b64:	8f 93       	push	r24
     b66:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sprintf>
	if(samu == 0 && acidente == 0){
     b6a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <samu>
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	81 11       	cpse	r24, r1
     b7a:	81 c0       	rjmp	.+258    	; 0xc7e <display+0x198>
     b7c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <acidente>
     b80:	91 11       	cpse	r25, r1
     b82:	7d c0       	rjmp	.+250    	; 0xc7e <display+0x198>
	//nokia_lcd_clear();//Limpa o display
	nokia_lcd_set_cursor(0,0); //Muda o cursos para a posição 0,5 ou seja, pula uma linha
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Modo",1); //Escreve um texto do tamanho 1
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	8f e0       	ldi	r24, 0x0F	; 15
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_set_cursor(30, 0);
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	8e e1       	ldi	r24, 0x1E	; 30
     b98:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	if(M_A)
     b9c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <M_A>
     ba0:	88 23       	and	r24, r24
     ba2:	31 f0       	breq	.+12     	; 0xbb0 <display+0xca>
		nokia_lcd_write_string("A",1);
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	84 e1       	ldi	r24, 0x14	; 20
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
     bae:	05 c0       	rjmp	.+10     	; 0xbba <display+0xd4>
	else
		nokia_lcd_write_string("M",1);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	86 e1       	ldi	r24, 0x16	; 22
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
		
	nokia_lcd_set_cursor(0, 10);
     bba:	6a e0       	ldi	r22, 0x0A	; 10
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.Vd",1);
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	88 e1       	ldi	r24, 0x18	; 24
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_set_cursor(30, 10);
     bcc:	6a e0       	ldi	r22, 0x0A	; 10
     bce:	8e e1       	ldi	r24, 0x1E	; 30
     bd0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string(t_green_string,1);
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 20);
     bde:	64 e1       	ldi	r22, 0x14	; 20
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.Vm",1);
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	8d e1       	ldi	r24, 0x1D	; 29
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_set_cursor(30, 20);
     bf0:	64 e1       	ldi	r22, 0x14	; 20
     bf2:	8e e1       	ldi	r24, 0x1E	; 30
     bf4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string(t_red_string,1);//Escreve o tempo do led vermelho com escala 1
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	ce 01       	movw	r24, r28
     bfc:	03 96       	adiw	r24, 0x03	; 3
     bfe:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 30);
     c02:	6e e1       	ldi	r22, 0x1E	; 30
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.Am",1);
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	82 e2       	ldi	r24, 0x22	; 34
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_set_cursor(30, 30);
     c14:	6e e1       	ldi	r22, 0x1E	; 30
     c16:	8e e1       	ldi	r24, 0x1E	; 30
     c18:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string(t_yellow_string,1);//Escreve 1 do tamanho 1
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	ce 01       	movw	r24, r28
     c20:	05 96       	adiw	r24, 0x05	; 5
     c22:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_set_cursor(40,botao*10);
     c26:	bb 0c       	add	r11, r11
     c28:	6b 2d       	mov	r22, r11
     c2a:	66 0f       	add	r22, r22
     c2c:	66 0f       	add	r22, r22
     c2e:	6b 0d       	add	r22, r11
     c30:	88 e2       	ldi	r24, 0x28	; 40
     c32:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("<",1);
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	87 e2       	ldi	r24, 0x27	; 39
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	for(uint8_t i = 1; i< 45;i++){
     c40:	11 e0       	ldi	r17, 0x01	; 1
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <display+0x16a>
		nokia_lcd_set_pixel(45,i,1);
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	61 2f       	mov	r22, r17
     c48:	8d e2       	ldi	r24, 0x2D	; 45
     c4a:	0e 94 24 0a 	call	0x1448	; 0x1448 <nokia_lcd_set_pixel>
	nokia_lcd_write_string("T.Am",1);
	nokia_lcd_set_cursor(30, 30);
	nokia_lcd_write_string(t_yellow_string,1);//Escreve 1 do tamanho 1
	nokia_lcd_set_cursor(40,botao*10);
	nokia_lcd_write_string("<",1);
	for(uint8_t i = 1; i< 45;i++){
     c4e:	1f 5f       	subi	r17, 0xFF	; 255
     c50:	1d 32       	cpi	r17, 0x2D	; 45
     c52:	c0 f3       	brcs	.-16     	; 0xc44 <display+0x15e>
		nokia_lcd_set_pixel(45,i,1);
	}
	nokia_lcd_set_cursor(50,25);
     c54:	69 e1       	ldi	r22, 0x19	; 25
     c56:	82 e3       	ldi	r24, 0x32	; 50
     c58:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string(taxa_string,2);
     c5c:	62 e0       	ldi	r22, 0x02	; 2
     c5e:	ce 01       	movw	r24, r28
     c60:	07 96       	adiw	r24, 0x07	; 7
     c62:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_set_cursor(50,40);
     c66:	68 e2       	ldi	r22, 0x28	; 40
     c68:	82 e3       	ldi	r24, 0x32	; 50
     c6a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("c/min",1);
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	89 e2       	ldi	r24, 0x29	; 41
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
     c78:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <nokia_lcd_render>
     c7c:	41 c0       	rjmp	.+130    	; 0xd00 <display+0x21a>
	}
	else{
		if(samu == 1){
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	b9 f4       	brne	.+46     	; 0xcb0 <display+0x1ca>
			nokia_lcd_clear();
     c82:	0e 94 0d 0a 	call	0x141a	; 0x141a <nokia_lcd_clear>
			nokia_lcd_set_cursor(0,0); //Muda o cursos para a posição 0,0 ou seja, pula uma linha
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" Emergencia",1);
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	8f e2       	ldi	r24, 0x2F	; 47
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 12);
     c98:	6c e0       	ldi	r22, 0x0C	; 12
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" Identificada",1);
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	8b e3       	ldi	r24, 0x3B	; 59
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_render();
     caa:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <nokia_lcd_render>
     cae:	28 c0       	rjmp	.+80     	; 0xd00 <display+0x21a>
		}else{
			nokia_lcd_clear();
     cb0:	0e 94 0d 0a 	call	0x141a	; 0x141a <nokia_lcd_clear>
			nokia_lcd_set_cursor(0,0); //Muda o cursos para a posição 0,0 ou seja, pula uma linha
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" Acidente",1);
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	89 e4       	ldi	r24, 0x49	; 73
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 12);
     cc6:	6c e0       	ldi	r22, 0x0C	; 12
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" Identificado",1);
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	83 e5       	ldi	r24, 0x53	; 83
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25);
     cd8:	69 e1       	ldi	r22, 0x19	; 25
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Samu a caminho",1);
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	81 e6       	ldi	r24, 0x61	; 97
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 35);
     cea:	63 e2       	ldi	r22, 0x23	; 35
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Notificar STTP",1);
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	80 e7       	ldi	r24, 0x70	; 112
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_render();
     cfc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <nokia_lcd_render>
		}
	}
	
}
     d00:	2a 96       	adiw	r28, 0x0a	; 10
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	08 95       	ret

00000d20 <cursor>:

//Altera o cursor de lugar
void cursor(uint8_t botao){
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	d8 2f       	mov	r29, r24
	uint8_t i;
	for(i = 0;i<=3; i++){//Apaga todos os campos do cursor
     d26:	c0 e0       	ldi	r28, 0x00	; 0
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <cursor+0x28>
		nokia_lcd_set_cursor(40,i*10);
     d2a:	6c 2f       	mov	r22, r28
     d2c:	66 0f       	add	r22, r22
     d2e:	86 2f       	mov	r24, r22
     d30:	88 0f       	add	r24, r24
     d32:	88 0f       	add	r24, r24
     d34:	68 0f       	add	r22, r24
     d36:	88 e2       	ldi	r24, 0x28	; 40
     d38:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
		nokia_lcd_write_string(" ",1);
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	86 e8       	ldi	r24, 0x86	; 134
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
}

//Altera o cursor de lugar
void cursor(uint8_t botao){
	uint8_t i;
	for(i = 0;i<=3; i++){//Apaga todos os campos do cursor
     d46:	cf 5f       	subi	r28, 0xFF	; 255
     d48:	c4 30       	cpi	r28, 0x04	; 4
     d4a:	78 f3       	brcs	.-34     	; 0xd2a <cursor+0xa>
		nokia_lcd_set_cursor(40,i*10);
		nokia_lcd_write_string(" ",1);
	}
	nokia_lcd_set_cursor(40,botao*10);
     d4c:	8d 2f       	mov	r24, r29
     d4e:	88 0f       	add	r24, r24
     d50:	68 2f       	mov	r22, r24
     d52:	66 0f       	add	r22, r22
     d54:	66 0f       	add	r22, r22
     d56:	68 0f       	add	r22, r24
     d58:	88 e2       	ldi	r24, 0x28	; 40
     d5a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("<",1);
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	87 e2       	ldi	r24, 0x27	; 39
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
	nokia_lcd_render();
     d68:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <nokia_lcd_render>
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <__vector_2>:
				display( t_red,t_green,t_yellow,botao, taxa);
				}
			}
			}
}
ISR(INT1_vect){// Muda o cursor
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
	if(botao ==3){
     d94:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <botao>
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	19 f4       	brne	.+6      	; 0xda2 <__vector_2+0x30>
		botao = 0;
     d9c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <botao>
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <__vector_2+0x36>
	}else{
		botao++;
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <botao>
	}
	cursor(botao);
     da8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <botao>
     dac:	0e 94 90 06 	call	0xd20	; 0xd20 <cursor>
}
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <ajuste_automatico>:
	nokia_lcd_render();
}

//Atualiza os tempos do semáforo com base no gráfico apresentado
void ajuste_automatico(){
	t_yellow = 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(taxa < 60){
     dd8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <taxa>
     ddc:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <taxa+0x1>
     de0:	8c 33       	cpi	r24, 0x3C	; 60
     de2:	91 05       	cpc	r25, r1
     de4:	38 f4       	brcc	.+14     	; 0xdf4 <ajuste_automatico+0x22>
		t_green = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
		t_red = 9;
     dec:	89 e0       	ldi	r24, 0x09	; 9
     dee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     df2:	08 95       	ret
		
	}else if(taxa <120){
     df4:	88 37       	cpi	r24, 0x78	; 120
     df6:	91 05       	cpc	r25, r1
     df8:	38 f4       	brcc	.+14     	; 0xe08 <ajuste_automatico+0x36>
			t_green = 2;
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
			t_red = 8;
     e00:	88 e0       	ldi	r24, 0x08	; 8
     e02:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     e06:	08 95       	ret
			
	}else if (taxa <180){
     e08:	84 3b       	cpi	r24, 0xB4	; 180
     e0a:	91 05       	cpc	r25, r1
     e0c:	38 f4       	brcc	.+14     	; 0xe1c <ajuste_automatico+0x4a>
			t_green = 3;
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
			t_red = 7;
     e14:	87 e0       	ldi	r24, 0x07	; 7
     e16:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     e1a:	08 95       	ret
			
	}else if(taxa <240){
     e1c:	80 3f       	cpi	r24, 0xF0	; 240
     e1e:	91 05       	cpc	r25, r1
     e20:	38 f4       	brcc	.+14     	; 0xe30 <ajuste_automatico+0x5e>
		t_green = 4;
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
		t_red = 6;
     e28:	86 e0       	ldi	r24, 0x06	; 6
     e2a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     e2e:	08 95       	ret
				
	}else if(taxa <300){
     e30:	8c 32       	cpi	r24, 0x2C	; 44
     e32:	21 e0       	ldi	r18, 0x01	; 1
     e34:	92 07       	cpc	r25, r18
     e36:	30 f4       	brcc	.+12     	; 0xe44 <ajuste_automatico+0x72>
		t_green = 5;
     e38:	85 e0       	ldi	r24, 0x05	; 5
     e3a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
		t_red = 5;
     e3e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     e42:	08 95       	ret
		
	}else if(taxa <360){
     e44:	88 36       	cpi	r24, 0x68	; 104
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	92 07       	cpc	r25, r18
     e4a:	38 f4       	brcc	.+14     	; 0xe5a <ajuste_automatico+0x88>
		t_green = 6;
     e4c:	86 e0       	ldi	r24, 0x06	; 6
     e4e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
		t_red = 4;
     e52:	84 e0       	ldi	r24, 0x04	; 4
     e54:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     e58:	08 95       	ret
		
	}else if(taxa <420){
     e5a:	84 3a       	cpi	r24, 0xA4	; 164
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	92 07       	cpc	r25, r18
     e60:	38 f4       	brcc	.+14     	; 0xe70 <ajuste_automatico+0x9e>
		t_green = 7;
     e62:	87 e0       	ldi	r24, 0x07	; 7
     e64:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
		t_red = 3;
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     e6e:	08 95       	ret
		
	}else if(taxa <480){
     e70:	80 3e       	cpi	r24, 0xE0	; 224
     e72:	91 40       	sbci	r25, 0x01	; 1
     e74:	38 f4       	brcc	.+14     	; 0xe84 <ajuste_automatico+0xb2>
		t_green = 8;
     e76:	88 e0       	ldi	r24, 0x08	; 8
     e78:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
		t_red = 2;
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     e82:	08 95       	ret
		
	}else {
		t_green = 9;
     e84:	89 e0       	ldi	r24, 0x09	; 9
     e86:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <t_green>
		t_red = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_red>
     e90:	08 95       	ret

00000e92 <__vector_5>:
uint8_t flag_[9] = {0},aux = 0, M_A = 0,aux2 = 0;
uint32_t tempo_ms = 0;//Incrementador de timer
uint16_t taxa=0,cont_carro= 0;

//Interrupções
ISR(PCINT2_vect){	//Botao selecional qual cor mudar o tempo
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
	if(!(PIND & 0b00000001))//Retorna 1 se PD0 for 1 
     eb8:	48 99       	sbic	0x09, 0	; 9
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <__vector_5+0x32>
	{
		//Presença de ambulância na rua- acionar abertura do sinal
		samu = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <samu>
     ec2:	44 c0       	rjmp	.+136    	; 0xf4c <__vector_5+0xba>
	
	}else{
		if(!(PIND & 0b00000010))//Retorna 1 se PD1 for 1
     ec4:	49 99       	sbic	0x09, 1	; 9
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <__vector_5+0x3e>
		{
			//Possível acidente na rua- para movimentção de veículos
			acidente = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <acidente>
     ece:	3e c0       	rjmp	.+124    	; 0xf4c <__vector_5+0xba>
			
		}else{
			if(botao == 0){//Ativa e desativa modo automatico
     ed0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <botao>
     ed4:	81 11       	cpse	r24, r1
     ed6:	18 c0       	rjmp	.+48     	; 0xf08 <__vector_5+0x76>
				teste_botao(0);
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 4e 04 	call	0x89c	; 0x89c <teste_botao>
				//Verifica se os botões de + ou - são apertados para mudar o modo
				if(M_A){
     ee0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <M_A>
     ee4:	81 11       	cpse	r24, r1
					ajuste_automatico();// Altera os tempos automaticamente
     ee6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <ajuste_automatico>
				}
				display( t_red,t_green,t_yellow,botao, taxa);
     eea:	00 91 96 01 	lds	r16, 0x0196	; 0x800196 <taxa>
     eee:	10 91 97 01 	lds	r17, 0x0197	; 0x800197 <taxa+0x1>
     ef2:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <botao>
     ef6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     efa:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <t_green>
     efe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_red>
     f02:	0e 94 73 05 	call	0xae6	; 0xae6 <display>
     f06:	22 c0       	rjmp	.+68     	; 0xf4c <__vector_5+0xba>
		
			}else{
				M_A = 0;
     f08:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <M_A>
				if(botao == 1){//Mudar tempo do sinal verde
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	29 f4       	brne	.+10     	; 0xf1a <__vector_5+0x88>
					teste_botao(&t_green);//Teste para aumentar ou diminuir o tempo
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 4e 04 	call	0x89c	; 0x89c <teste_botao>
     f18:	0b c0       	rjmp	.+22     	; 0xf30 <__vector_5+0x9e>
			
				}else{if(botao ==2)// Mudar tempo do sinal vermelho
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	29 f4       	brne	.+10     	; 0xf28 <__vector_5+0x96>
						teste_botao(&t_red);
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 4e 04 	call	0x89c	; 0x89c <teste_botao>
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <__vector_5+0x9e>
					else//Mudar tempo do amarelo
						teste_botao(&t_yellow);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 4e 04 	call	0x89c	; 0x89c <teste_botao>
			
				}
				display( t_red,t_green,t_yellow,botao, taxa);
     f30:	00 91 96 01 	lds	r16, 0x0196	; 0x800196 <taxa>
     f34:	10 91 97 01 	lds	r17, 0x0197	; 0x800197 <taxa+0x1>
     f38:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <botao>
     f3c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f40:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <t_green>
     f44:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_red>
     f48:	0e 94 73 05 	call	0xae6	; 0xae6 <display>
				}
			}
			}
}
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <__vector_1>:
	}else{
		botao++;
	}
	cursor(botao);
}
ISR(INT0_vect){//Interrupção de contagem de carros
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	2f 93       	push	r18
     f82:	3f 93       	push	r19
     f84:	4f 93       	push	r20
     f86:	5f 93       	push	r21
     f88:	6f 93       	push	r22
     f8a:	7f 93       	push	r23
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	af 93       	push	r26
     f92:	bf 93       	push	r27
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
	static uint16_t cont_carro =0;
	cont_carro++;
     f98:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <cont_carro.2195>
     f9c:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <cont_carro.2195+0x1>
     fa0:	2f 5f       	subi	r18, 0xFF	; 255
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <cont_carro.2195+0x1>
     fa8:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <cont_carro.2195>
	if(aux2){
     fac:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <aux2>
     fb0:	88 23       	and	r24, r24
     fb2:	c1 f0       	breq	.+48     	; 0xfe4 <__vector_1+0x72>
		taxa = cont_carro/5*60;//Média de carros em 1 min
     fb4:	ad ec       	ldi	r26, 0xCD	; 205
     fb6:	bc ec       	ldi	r27, 0xCC	; 204
     fb8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__umulhisi3>
     fbc:	96 95       	lsr	r25
     fbe:	87 95       	ror	r24
     fc0:	96 95       	lsr	r25
     fc2:	87 95       	ror	r24
     fc4:	4c e3       	ldi	r20, 0x3C	; 60
     fc6:	48 9f       	mul	r20, r24
     fc8:	90 01       	movw	r18, r0
     fca:	49 9f       	mul	r20, r25
     fcc:	30 0d       	add	r19, r0
     fce:	11 24       	eor	r1, r1
     fd0:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <taxa+0x1>
     fd4:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <taxa>
		aux2=0;
     fd8:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <aux2>
		cont_carro = 0;
     fdc:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <cont_carro.2195+0x1>
     fe0:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <cont_carro.2195>
	}
	if(M_A)//Verifica de o modo automático está ligado para ajustar os tempos
     fe4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <M_A>
     fe8:	81 11       	cpse	r24, r1
		ajuste_automatico();
     fea:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <ajuste_automatico>
	if(samu == 0 && acidente ==0)
     fee:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <samu>
     ff2:	81 11       	cpse	r24, r1
     ff4:	12 c0       	rjmp	.+36     	; 0x101a <__vector_1+0xa8>
     ff6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <acidente>
     ffa:	81 11       	cpse	r24, r1
     ffc:	0e c0       	rjmp	.+28     	; 0x101a <__vector_1+0xa8>
		display(t_red,t_green,  t_yellow,  botao,  taxa);
     ffe:	00 91 96 01 	lds	r16, 0x0196	; 0x800196 <taxa>
    1002:	10 91 97 01 	lds	r17, 0x0197	; 0x800197 <taxa+0x1>
    1006:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <botao>
    100a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    100e:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <t_green>
    1012:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_red>
    1016:	0e 94 73 05 	call	0xae6	; 0xae6 <display>
}
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <Leitura_sensores_ADC>:
		t_red = 1;
	}
	
}

void Leitura_sensores_ADC( uint8_t *ligar){//Ler as entradas analogicas e decide se liga a iluminação
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	27 97       	sbiw	r28, 0x07	; 7
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	7c 01       	movw	r14, r24
	
	static uint8_t canal =0;
	static uint8_t Chuva_leitura= 0;
	unsigned char Lux_dgt[4] = {0};
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	1a 82       	std	Y+2, r1	; 0x02
    1062:	1b 82       	std	Y+3, r1	; 0x03
    1064:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char leitura_Chuva_string[3];
	 static uint16_t Lux_leitura= 0;

			switch(canal){
    1066:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <canal.2266>
    106a:	88 23       	and	r24, r24
    106c:	19 f0       	breq	.+6      	; 0x1074 <Leitura_sensores_ADC+0x34>
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	b9 f0       	breq	.+46     	; 0x10a0 <Leitura_sensores_ADC+0x60>
    1072:	2a c0       	rjmp	.+84     	; 0x10c8 <Leitura_sensores_ADC+0x88>
				case 0:
					Lux_leitura = 1023000/ADC - 1000;
    1074:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1078:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	68 e1       	ldi	r22, 0x18	; 24
    1082:	7c e9       	ldi	r23, 0x9C	; 156
    1084:	8f e0       	ldi	r24, 0x0F	; 15
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 46 0b 	call	0x168c	; 0x168c <__divmodsi4>
    108c:	28 5e       	subi	r18, 0xE8	; 232
    108e:	33 40       	sbci	r19, 0x03	; 3
    1090:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <Lux_leitura.2270+0x1>
    1094:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <Lux_leitura.2270>
					ADMUX = 0b01000000;//Mudança para canal PC0_Chuva
    1098:	80 e4       	ldi	r24, 0x40	; 64
    109a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
					break;
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <Leitura_sensores_ADC+0x88>
				case 1:
					Chuva_leitura = 50*ADC/1023 +5;
    10a0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    10a4:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    10a8:	42 e3       	ldi	r20, 0x32	; 50
    10aa:	42 9f       	mul	r20, r18
    10ac:	c0 01       	movw	r24, r0
    10ae:	43 9f       	mul	r20, r19
    10b0:	90 0d       	add	r25, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	6f ef       	ldi	r22, 0xFF	; 255
    10b6:	73 e0       	ldi	r23, 0x03	; 3
    10b8:	0e 94 10 0b 	call	0x1620	; 0x1620 <__udivmodhi4>
    10bc:	6b 5f       	subi	r22, 0xFB	; 251
    10be:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <__data_end>
					ADMUX = 0b01000101;//Mudança para canal PC5_Iluminação natural
    10c2:	85 e4       	ldi	r24, 0x45	; 69
    10c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
					break;
			}
		if(canal == 0)
    10c8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <canal.2266>
    10cc:	81 11       	cpse	r24, r1
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <Leitura_sensores_ADC+0x98>
			canal++;
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <canal.2266>
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <Leitura_sensores_ADC+0x9c>
		else
			canal = 0;
    10d8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <canal.2266>
		
		sprintf(Lux_dgt, "%u",Lux_leitura);
    10dc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <Lux_leitura.2270+0x1>
    10e0:	8f 93       	push	r24
    10e2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <Lux_leitura.2270>
    10e6:	8f 93       	push	r24
    10e8:	0c e0       	ldi	r16, 0x0C	; 12
    10ea:	11 e0       	ldi	r17, 0x01	; 1
    10ec:	1f 93       	push	r17
    10ee:	0f 93       	push	r16
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	9f 93       	push	r25
    10f6:	8f 93       	push	r24
    10f8:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sprintf>
		sprintf(leitura_Chuva_string,"%u",  Chuva_leitura);
    10fc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
    1100:	1f 92       	push	r1
    1102:	8f 93       	push	r24
    1104:	1f 93       	push	r17
    1106:	0f 93       	push	r16
    1108:	ce 01       	movw	r24, r28
    110a:	05 96       	adiw	r24, 0x05	; 5
    110c:	9f 93       	push	r25
    110e:	8f 93       	push	r24
    1110:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sprintf>
		if(samu == 0 && acidente == 0){
    1114:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <samu>
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	81 11       	cpse	r24, r1
    1124:	52 c0       	rjmp	.+164    	; 0x11ca <Leitura_sensores_ADC+0x18a>
    1126:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <acidente>
    112a:	81 11       	cpse	r24, r1
    112c:	4e c0       	rjmp	.+156    	; 0x11ca <Leitura_sensores_ADC+0x18a>
			nokia_lcd_set_cursor(0,40);
    112e:	68 e2       	ldi	r22, 0x28	; 40
    1130:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("mm/h",1);//milímetros por hora
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	8f e7       	ldi	r24, 0x7F	; 127
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30,40);
    113e:	68 e2       	ldi	r22, 0x28	; 40
    1140:	8e e1       	ldi	r24, 0x1E	; 30
    1142:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  ",1);//Para limpar o espaço do numero da chuva
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	85 e8       	ldi	r24, 0x85	; 133
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30,40);
    1150:	68 e2       	ldi	r22, 0x28	; 40
    1152:	8e e1       	ldi	r24, 0x1E	; 30
    1154:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  ",1);
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	85 e8       	ldi	r24, 0x85	; 133
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30,40);
    1162:	68 e2       	ldi	r22, 0x28	; 40
    1164:	8e e1       	ldi	r24, 0x1E	; 30
    1166:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string(leitura_Chuva_string,1);
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	ce 01       	movw	r24, r28
    116e:	05 96       	adiw	r24, 0x05	; 5
    1170:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(50,0);
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	82 e3       	ldi	r24, 0x32	; 50
    1178:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("   ",2);
    117c:	62 e0       	ldi	r22, 0x02	; 2
    117e:	84 e8       	ldi	r24, 0x84	; 132
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(50,0);
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	82 e3       	ldi	r24, 0x32	; 50
    118a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string(Lux_dgt,2);
    118e:	62 e0       	ldi	r22, 0x02	; 2
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_set_cursor(50,15);
    1198:	6f e0       	ldi	r22, 0x0F	; 15
    119a:	82 e3       	ldi	r24, 0x32	; 50
    119c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("lux",1);
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	88 e8       	ldi	r24, 0x88	; 136
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nokia_lcd_write_string>
			nokia_lcd_render();
    11aa:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <nokia_lcd_render>
			display(t_red,t_green,  t_yellow,  botao,  taxa);
    11ae:	00 91 96 01 	lds	r16, 0x0196	; 0x800196 <taxa>
    11b2:	10 91 97 01 	lds	r17, 0x0197	; 0x800197 <taxa+0x1>
    11b6:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <botao>
    11ba:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    11be:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <t_green>
    11c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_red>
    11c6:	0e 94 73 05 	call	0xae6	; 0xae6 <display>
		}

		//Condição para ativar a Iluminação
		//Se a chuva estiver com uma taxa de mais de 10mm/h a iluminação irá acender independente da quantidade de luminosidade no ambiente
		if(Chuva_leitura > 10)
    11ca:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
    11ce:	8b 30       	cpi	r24, 0x0B	; 11
    11d0:	20 f0       	brcs	.+8      	; 0x11da <Leitura_sensores_ADC+0x19a>
			*ligar = 1; //Ligada 100%
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	f7 01       	movw	r30, r14
    11d6:	80 83       	st	Z, r24
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <Leitura_sensores_ADC+0x1cc>
		else{
			if(Lux_leitura > 300){
    11da:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <Lux_leitura.2270>
    11de:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <Lux_leitura.2270+0x1>
    11e2:	8d 32       	cpi	r24, 0x2D	; 45
    11e4:	91 40       	sbci	r25, 0x01	; 1
    11e6:	18 f0       	brcs	.+6      	; 0x11ee <Leitura_sensores_ADC+0x1ae>
					*ligar = 0;//Apagado
    11e8:	f7 01       	movw	r30, r14
    11ea:	10 82       	st	Z, r1
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <Leitura_sensores_ADC+0x1cc>
			}
			else
				if ( (taxa != 0) || !(PIND & 0b00000001))
    11ee:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <taxa>
    11f2:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <taxa+0x1>
    11f6:	89 2b       	or	r24, r25
    11f8:	11 f4       	brne	.+4      	; 0x11fe <Leitura_sensores_ADC+0x1be>
    11fa:	48 99       	sbic	0x09, 0	; 9
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <Leitura_sensores_ADC+0x1c6>
					*ligar = 1;	//Ligada 100%
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	f7 01       	movw	r30, r14
    1202:	80 83       	st	Z, r24
    1204:	03 c0       	rjmp	.+6      	; 0x120c <Leitura_sensores_ADC+0x1cc>
				else
					*ligar = 2;//Meia luz- Irá ficar com meia luz se estiver com < 300 lux e não estiver passando carros nem pessoas
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	f7 01       	movw	r30, r14
    120a:	80 83       	st	Z, r24
		}

}
    120c:	27 96       	adiw	r28, 0x07	; 7
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	08 95       	ret

00001226 <__vector_7>:
	if(M_A)//Verifica de o modo automático está ligado para ajustar os tempos
		ajuste_automatico();
	if(samu == 0 && acidente ==0)
		display(t_red,t_green,  t_yellow,  botao,  taxa);
}
ISR(TIMER2_COMPA_vect){//Incrementa a casa 1 ms
    1226:	1f 92       	push	r1
    1228:	0f 92       	push	r0
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	0f 92       	push	r0
    122e:	11 24       	eor	r1, r1
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	4f 93       	push	r20
    123e:	5f 93       	push	r21
    1240:	6f 93       	push	r22
    1242:	7f 93       	push	r23
    1244:	8f 93       	push	r24
    1246:	9f 93       	push	r25
    1248:	af 93       	push	r26
    124a:	bf 93       	push	r27
    124c:	ef 93       	push	r30
    124e:	ff 93       	push	r31
	tempo_ms ++;
    1250:	c0 90 98 01 	lds	r12, 0x0198	; 0x800198 <tempo_ms>
    1254:	d0 90 99 01 	lds	r13, 0x0199	; 0x800199 <tempo_ms+0x1>
    1258:	e0 90 9a 01 	lds	r14, 0x019A	; 0x80019a <tempo_ms+0x2>
    125c:	f0 90 9b 01 	lds	r15, 0x019B	; 0x80019b <tempo_ms+0x3>
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	c8 1a       	sub	r12, r24
    1264:	d8 0a       	sbc	r13, r24
    1266:	e8 0a       	sbc	r14, r24
    1268:	f8 0a       	sbc	r15, r24
    126a:	c0 92 98 01 	sts	0x0198, r12	; 0x800198 <tempo_ms>
    126e:	d0 92 99 01 	sts	0x0199, r13	; 0x800199 <tempo_ms+0x1>
    1272:	e0 92 9a 01 	sts	0x019A, r14	; 0x80019a <tempo_ms+0x2>
    1276:	f0 92 9b 01 	sts	0x019B, r15	; 0x80019b <tempo_ms+0x3>
	//PORTD ^=0b00000010;
	//Flag para calcular media de carros em 5s
	if(!(tempo_ms % 5000)){
    127a:	c7 01       	movw	r24, r14
    127c:	b6 01       	movw	r22, r12
    127e:	28 e8       	ldi	r18, 0x88	; 136
    1280:	33 e1       	ldi	r19, 0x13	; 19
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	0e 94 24 0b 	call	0x1648	; 0x1648 <__udivmodsi4>
    128a:	67 2b       	or	r22, r23
    128c:	68 2b       	or	r22, r24
    128e:	69 2b       	or	r22, r25
    1290:	19 f4       	brne	.+6      	; 0x1298 <__vector_7+0x72>
		aux2 = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <aux2>
	}
	if(!(tempo_ms % 250)){// A cada 500 ms é feita a aquisição da quantidade de luminosidade e de chuva
    1298:	c7 01       	movw	r24, r14
    129a:	b6 01       	movw	r22, r12
    129c:	2a ef       	ldi	r18, 0xFA	; 250
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	0e 94 24 0b 	call	0x1648	; 0x1648 <__udivmodsi4>
    12a8:	67 2b       	or	r22, r23
    12aa:	68 2b       	or	r22, r24
    12ac:	69 2b       	or	r22, r25
    12ae:	89 f4       	brne	.+34     	; 0x12d2 <__vector_7+0xac>
		
		Leitura_sensores_ADC(&ligar);//Plota os valores lo LCD e verifica se precisa acende a luz
    12b0:	81 ea       	ldi	r24, 0xA1	; 161
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 20 08 	call	0x1040	; 0x1040 <Leitura_sensores_ADC>
		
		if(ligar == 1)
    12b8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <ligar>
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	19 f4       	brne	.+6      	; 0x12c6 <__vector_7+0xa0>
			OCR0A = 255;//Acende a Iluminação com 100%
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	87 bd       	out	0x27, r24	; 39
    12c4:	06 c0       	rjmp	.+12     	; 0x12d2 <__vector_7+0xac>
		else if(ligar == 2)
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	19 f4       	brne	.+6      	; 0x12d0 <__vector_7+0xaa>
				OCR0A = 77;//Iluminação com 30%
    12ca:	8d e4       	ldi	r24, 0x4D	; 77
    12cc:	87 bd       	out	0x27, r24	; 39
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <__vector_7+0xac>
			else
				OCR0A = 0;//Apaga a iluminação
    12d0:	17 bc       	out	0x27, r1	; 39
	}
}
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
    12fc:	98 b1       	in	r25, 0x08	; 8
    12fe:	97 7f       	andi	r25, 0xF7	; 247
    1300:	98 b9       	out	0x08, r25	; 8
    1302:	66 23       	and	r22, r22
    1304:	29 f0       	breq	.+10     	; 0x1310 <write+0x14>
    1306:	98 b1       	in	r25, 0x08	; 8
    1308:	94 60       	ori	r25, 0x04	; 4
    130a:	98 b9       	out	0x08, r25	; 8
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	1f c0       	rjmp	.+62     	; 0x134e <write+0x52>
    1310:	98 b1       	in	r25, 0x08	; 8
    1312:	9b 7f       	andi	r25, 0xFB	; 251
    1314:	98 b9       	out	0x08, r25	; 8
    1316:	fa cf       	rjmp	.-12     	; 0x130c <write+0x10>
    1318:	47 e0       	ldi	r20, 0x07	; 7
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	49 1b       	sub	r20, r25
    131e:	51 09       	sbc	r21, r1
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <write+0x2e>
    1326:	35 95       	asr	r19
    1328:	27 95       	ror	r18
    132a:	4a 95       	dec	r20
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <write+0x2a>
    132e:	20 ff       	sbrs	r18, 0
    1330:	04 c0       	rjmp	.+8      	; 0x133a <write+0x3e>
    1332:	28 b1       	in	r18, 0x08	; 8
    1334:	22 60       	ori	r18, 0x02	; 2
    1336:	28 b9       	out	0x08, r18	; 8
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <write+0x44>
    133a:	28 b1       	in	r18, 0x08	; 8
    133c:	2d 7f       	andi	r18, 0xFD	; 253
    133e:	28 b9       	out	0x08, r18	; 8
    1340:	28 b1       	in	r18, 0x08	; 8
    1342:	20 64       	ori	r18, 0x40	; 64
    1344:	28 b9       	out	0x08, r18	; 8
    1346:	28 b1       	in	r18, 0x08	; 8
    1348:	2f 7b       	andi	r18, 0xBF	; 191
    134a:	28 b9       	out	0x08, r18	; 8
    134c:	9f 5f       	subi	r25, 0xFF	; 255
    134e:	98 30       	cpi	r25, 0x08	; 8
    1350:	18 f3       	brcs	.-58     	; 0x1318 <write+0x1c>
    1352:	88 b1       	in	r24, 0x08	; 8
    1354:	88 60       	ori	r24, 0x08	; 8
    1356:	88 b9       	out	0x08, r24	; 8
    1358:	08 95       	ret

0000135a <write_cmd>:
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <write>
    1360:	08 95       	ret

00001362 <write_data>:
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	0e 94 7e 09 	call	0x12fc	; 0x12fc <write>
    1368:	08 95       	ret

0000136a <nokia_lcd_init>:
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	87 b1       	in	r24, 0x07	; 7
    1370:	88 60       	ori	r24, 0x08	; 8
    1372:	87 b9       	out	0x07, r24	; 7
    1374:	87 b1       	in	r24, 0x07	; 7
    1376:	80 61       	ori	r24, 0x10	; 16
    1378:	87 b9       	out	0x07, r24	; 7
    137a:	87 b1       	in	r24, 0x07	; 7
    137c:	84 60       	ori	r24, 0x04	; 4
    137e:	87 b9       	out	0x07, r24	; 7
    1380:	87 b1       	in	r24, 0x07	; 7
    1382:	82 60       	ori	r24, 0x02	; 2
    1384:	87 b9       	out	0x07, r24	; 7
    1386:	87 b1       	in	r24, 0x07	; 7
    1388:	80 64       	ori	r24, 0x40	; 64
    138a:	87 b9       	out	0x07, r24	; 7
    138c:	88 b1       	in	r24, 0x08	; 8
    138e:	80 61       	ori	r24, 0x10	; 16
    1390:	88 b9       	out	0x08, r24	; 8
    1392:	88 b1       	in	r24, 0x08	; 8
    1394:	88 60       	ori	r24, 0x08	; 8
    1396:	88 b9       	out	0x08, r24	; 8
    1398:	83 ec       	ldi	r24, 0xC3	; 195
    139a:	99 e0       	ldi	r25, 0x09	; 9
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <nokia_lcd_init+0x32>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <nokia_lcd_init+0x38>
    13a2:	00 00       	nop
    13a4:	88 b1       	in	r24, 0x08	; 8
    13a6:	8f 7e       	andi	r24, 0xEF	; 239
    13a8:	88 b9       	out	0x08, r24	; 8
    13aa:	8b e5       	ldi	r24, 0x5B	; 91
    13ac:	94 e4       	ldi	r25, 0x44	; 68
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <nokia_lcd_init+0x44>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <nokia_lcd_init+0x4a>
    13b4:	00 00       	nop
    13b6:	88 b1       	in	r24, 0x08	; 8
    13b8:	80 61       	ori	r24, 0x10	; 16
    13ba:	88 b9       	out	0x08, r24	; 8
    13bc:	88 b1       	in	r24, 0x08	; 8
    13be:	87 7f       	andi	r24, 0xF7	; 247
    13c0:	88 b9       	out	0x08, r24	; 8
    13c2:	81 e2       	ldi	r24, 0x21	; 33
    13c4:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    13c8:	83 e1       	ldi	r24, 0x13	; 19
    13ca:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    13ce:	86 e0       	ldi	r24, 0x06	; 6
    13d0:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    13d4:	82 ec       	ldi	r24, 0xC2	; 194
    13d6:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    13da:	80 e2       	ldi	r24, 0x20	; 32
    13dc:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    13e0:	89 e0       	ldi	r24, 0x09	; 9
    13e2:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    13e6:	80 e8       	ldi	r24, 0x80	; 128
    13e8:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    13ec:	80 e4       	ldi	r24, 0x40	; 64
    13ee:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    13f2:	c0 e0       	ldi	r28, 0x00	; 0
    13f4:	d0 e0       	ldi	r29, 0x00	; 0
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <nokia_lcd_init+0x96>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	0e 94 b1 09 	call	0x1362	; 0x1362 <write_data>
    13fe:	21 96       	adiw	r28, 0x01	; 1
    1400:	c8 3f       	cpi	r28, 0xF8	; 248
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	d9 07       	cpc	r29, r25
    1406:	c0 f3       	brcs	.-16     	; 0x13f8 <nokia_lcd_init+0x8e>
    1408:	88 e0       	ldi	r24, 0x08	; 8
    140a:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    140e:	8c e0       	ldi	r24, 0x0C	; 12
    1410:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <nokia_lcd_clear>:
    141a:	80 e8       	ldi	r24, 0x80	; 128
    141c:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    1420:	80 e4       	ldi	r24, 0x40	; 64
    1422:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
    1426:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <nokia_lcd+0x1f8>
    142a:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <nokia_lcd+0x1f9>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	05 c0       	rjmp	.+10     	; 0x143e <nokia_lcd_clear+0x24>
    1434:	fc 01       	movw	r30, r24
    1436:	ed 55       	subi	r30, 0x5D	; 93
    1438:	fe 4f       	sbci	r31, 0xFE	; 254
    143a:	10 82       	st	Z, r1
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	88 3f       	cpi	r24, 0xF8	; 248
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	92 07       	cpc	r25, r18
    1444:	b8 f3       	brcs	.-18     	; 0x1434 <nokia_lcd_clear+0x1a>
    1446:	08 95       	ret

00001448 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    1448:	26 2f       	mov	r18, r22
    144a:	26 95       	lsr	r18
    144c:	26 95       	lsr	r18
    144e:	26 95       	lsr	r18
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	34 e5       	ldi	r19, 0x54	; 84
    1454:	23 9f       	mul	r18, r19
    1456:	80 0d       	add	r24, r0
    1458:	91 1d       	adc	r25, r1
    145a:	11 24       	eor	r1, r1
	if (value)
    145c:	44 23       	and	r20, r20
    145e:	79 f0       	breq	.+30     	; 0x147e <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
    1460:	67 70       	andi	r22, 0x07	; 7
    1462:	21 e0       	ldi	r18, 0x01	; 1
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <nokia_lcd_set_pixel+0x24>
    1468:	22 0f       	add	r18, r18
    146a:	33 1f       	adc	r19, r19
    146c:	6a 95       	dec	r22
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <nokia_lcd_set_pixel+0x20>
    1470:	fc 01       	movw	r30, r24
    1472:	ed 55       	subi	r30, 0x5D	; 93
    1474:	fe 4f       	sbci	r31, 0xFE	; 254
    1476:	80 81       	ld	r24, Z
    1478:	28 2b       	or	r18, r24
    147a:	20 83       	st	Z, r18
    147c:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
    147e:	67 70       	andi	r22, 0x07	; 7
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <nokia_lcd_set_pixel+0x42>
    1486:	22 0f       	add	r18, r18
    1488:	33 1f       	adc	r19, r19
    148a:	6a 95       	dec	r22
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <nokia_lcd_set_pixel+0x3e>
    148e:	fc 01       	movw	r30, r24
    1490:	ed 55       	subi	r30, 0x5D	; 93
    1492:	fe 4f       	sbci	r31, 0xFE	; 254
    1494:	20 95       	com	r18
    1496:	80 81       	ld	r24, Z
    1498:	28 23       	and	r18, r24
    149a:	20 83       	st	Z, r18
    149c:	08 95       	ret

0000149e <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	e8 2e       	mov	r14, r24
    14ac:	f6 2e       	mov	r15, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    14ae:	00 e0       	ldi	r16, 0x00	; 0
    14b0:	45 c0       	rjmp	.+138    	; 0x153c <nokia_lcd_write_char+0x9e>
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    14b2:	2e 2d       	mov	r18, r14
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	20 52       	subi	r18, 0x20	; 32
    14b8:	31 09       	sbc	r19, r1
    14ba:	80 2f       	mov	r24, r16
    14bc:	6f 2d       	mov	r22, r15
    14be:	0e 94 04 0b 	call	0x1608	; 0x1608 <__udivmodqi4>
    14c2:	f9 01       	movw	r30, r18
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	e2 0f       	add	r30, r18
    14ce:	f3 1f       	adc	r31, r19
    14d0:	e8 0f       	add	r30, r24
    14d2:	f1 1d       	adc	r31, r1
    14d4:	e6 58       	subi	r30, 0x86	; 134
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	e4 91       	lpm	r30, Z
    14da:	81 2f       	mov	r24, r17
    14dc:	0e 94 04 0b 	call	0x1608	; 0x1608 <__udivmodqi4>
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <nokia_lcd_write_char+0x4a>
    14e4:	f5 95       	asr	r31
    14e6:	e7 95       	ror	r30
    14e8:	8a 95       	dec	r24
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <nokia_lcd_write_char+0x46>
    14ec:	e0 ff       	sbrs	r30, 0
    14ee:	0a c0       	rjmp	.+20     	; 0x1504 <nokia_lcd_write_char+0x66>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    14f0:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <nokia_lcd+0x1f9>
    14f4:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <nokia_lcd+0x1f8>
    14f8:	61 0f       	add	r22, r17
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	80 0f       	add	r24, r16
    14fe:	0e 94 24 0a 	call	0x1448	; 0x1448 <nokia_lcd_set_pixel>
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <nokia_lcd_write_char+0x78>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1504:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <nokia_lcd+0x1f9>
    1508:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <nokia_lcd+0x1f8>
    150c:	61 0f       	add	r22, r17
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	80 0f       	add	r24, r16
    1512:	0e 94 24 0a 	call	0x1448	; 0x1448 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1516:	1f 5f       	subi	r17, 0xFF	; 255
    1518:	01 c0       	rjmp	.+2      	; 0x151c <nokia_lcd_write_char+0x7e>
    151a:	10 e0       	ldi	r17, 0x00	; 0
    151c:	21 2f       	mov	r18, r17
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	ce 01       	movw	r24, r28
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	8c 1b       	sub	r24, r28
    1530:	9d 0b       	sbc	r25, r29
    1532:	28 17       	cp	r18, r24
    1534:	39 07       	cpc	r19, r25
    1536:	0c f4       	brge	.+2      	; 0x153a <nokia_lcd_write_char+0x9c>
    1538:	bc cf       	rjmp	.-136    	; 0x14b2 <nokia_lcd_write_char+0x14>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    153a:	0f 5f       	subi	r16, 0xFF	; 255
    153c:	20 2f       	mov	r18, r16
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	cf 2d       	mov	r28, r15
    1542:	d0 e0       	ldi	r29, 0x00	; 0
    1544:	ce 01       	movw	r24, r28
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	8c 0f       	add	r24, r28
    1550:	9d 1f       	adc	r25, r29
    1552:	28 17       	cp	r18, r24
    1554:	39 07       	cpc	r19, r25
    1556:	0c f3       	brlt	.-62     	; 0x151a <nokia_lcd_write_char+0x7c>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1558:	eb e9       	ldi	r30, 0x9B	; 155
    155a:	f3 e0       	ldi	r31, 0x03	; 3
    155c:	8f 2d       	mov	r24, r15
    155e:	88 0f       	add	r24, r24
    1560:	88 0f       	add	r24, r24
    1562:	8f 0d       	add	r24, r15
    1564:	90 81       	ld	r25, Z
    1566:	89 0f       	add	r24, r25
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	80 83       	st	Z, r24
	if (nokia_lcd.cursor_x >= 84) {
    156c:	84 35       	cpi	r24, 0x54	; 84
    156e:	70 f0       	brcs	.+28     	; 0x158c <nokia_lcd_write_char+0xee>
		nokia_lcd.cursor_x = 0;
    1570:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    1574:	ec e9       	ldi	r30, 0x9C	; 156
    1576:	f3 e0       	ldi	r31, 0x03	; 3
    1578:	8f 2d       	mov	r24, r15
    157a:	88 0f       	add	r24, r24
    157c:	88 0f       	add	r24, r24
    157e:	88 0f       	add	r24, r24
    1580:	98 2f       	mov	r25, r24
    1582:	9f 19       	sub	r25, r15
    1584:	80 81       	ld	r24, Z
    1586:	89 0f       	add	r24, r25
    1588:	8f 5f       	subi	r24, 0xFF	; 255
    158a:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    158c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <nokia_lcd+0x1f9>
    1590:	80 33       	cpi	r24, 0x30	; 48
    1592:	20 f0       	brcs	.+8      	; 0x159c <nokia_lcd_write_char+0xfe>
		nokia_lcd.cursor_x = 0;
    1594:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1598:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <nokia_lcd+0x1f9>
	}
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	08 95       	ret

000015aa <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	ec 01       	movw	r28, r24
    15b2:	16 2f       	mov	r17, r22
	while(*str)
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
    15b6:	21 96       	adiw	r28, 0x01	; 1
    15b8:	61 2f       	mov	r22, r17
    15ba:	0e 94 4f 0a 	call	0x149e	; 0x149e <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    15be:	88 81       	ld	r24, Y
    15c0:	81 11       	cpse	r24, r1
    15c2:	f9 cf       	rjmp	.-14     	; 0x15b6 <nokia_lcd_write_string+0xc>
		nokia_lcd_write_char(*str++, scale);
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	08 95       	ret

000015cc <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    15cc:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    15d0:	60 93 9c 03 	sts	0x039C, r22	; 0x80039c <nokia_lcd+0x1f9>
    15d4:	08 95       	ret

000015d6 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    15da:	80 e8       	ldi	r24, 0x80	; 128
    15dc:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>
	write_cmd(0x40);
    15e0:	80 e4       	ldi	r24, 0x40	; 64
    15e2:	0e 94 ad 09 	call	0x135a	; 0x135a <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    15e6:	c0 e0       	ldi	r28, 0x00	; 0
    15e8:	d0 e0       	ldi	r29, 0x00	; 0
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <nokia_lcd_render+0x24>
		write_data(nokia_lcd.screen[i]);
    15ec:	fe 01       	movw	r30, r28
    15ee:	ed 55       	subi	r30, 0x5D	; 93
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	80 81       	ld	r24, Z
    15f4:	0e 94 b1 09 	call	0x1362	; 0x1362 <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    15f8:	21 96       	adiw	r28, 0x01	; 1
    15fa:	c8 3f       	cpi	r28, 0xF8	; 248
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	d8 07       	cpc	r29, r24
    1600:	a8 f3       	brcs	.-22     	; 0x15ec <nokia_lcd_render+0x16>
		write_data(nokia_lcd.screen[i]);
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <__udivmodqi4>:
    1608:	99 1b       	sub	r25, r25
    160a:	79 e0       	ldi	r23, 0x09	; 9
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <__udivmodqi4_ep>

0000160e <__udivmodqi4_loop>:
    160e:	99 1f       	adc	r25, r25
    1610:	96 17       	cp	r25, r22
    1612:	08 f0       	brcs	.+2      	; 0x1616 <__udivmodqi4_ep>
    1614:	96 1b       	sub	r25, r22

00001616 <__udivmodqi4_ep>:
    1616:	88 1f       	adc	r24, r24
    1618:	7a 95       	dec	r23
    161a:	c9 f7       	brne	.-14     	; 0x160e <__udivmodqi4_loop>
    161c:	80 95       	com	r24
    161e:	08 95       	ret

00001620 <__udivmodhi4>:
    1620:	aa 1b       	sub	r26, r26
    1622:	bb 1b       	sub	r27, r27
    1624:	51 e1       	ldi	r21, 0x11	; 17
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <__udivmodhi4_ep>

00001628 <__udivmodhi4_loop>:
    1628:	aa 1f       	adc	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	a6 17       	cp	r26, r22
    162e:	b7 07       	cpc	r27, r23
    1630:	10 f0       	brcs	.+4      	; 0x1636 <__udivmodhi4_ep>
    1632:	a6 1b       	sub	r26, r22
    1634:	b7 0b       	sbc	r27, r23

00001636 <__udivmodhi4_ep>:
    1636:	88 1f       	adc	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	5a 95       	dec	r21
    163c:	a9 f7       	brne	.-22     	; 0x1628 <__udivmodhi4_loop>
    163e:	80 95       	com	r24
    1640:	90 95       	com	r25
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	08 95       	ret

00001648 <__udivmodsi4>:
    1648:	a1 e2       	ldi	r26, 0x21	; 33
    164a:	1a 2e       	mov	r1, r26
    164c:	aa 1b       	sub	r26, r26
    164e:	bb 1b       	sub	r27, r27
    1650:	fd 01       	movw	r30, r26
    1652:	0d c0       	rjmp	.+26     	; 0x166e <__udivmodsi4_ep>

00001654 <__udivmodsi4_loop>:
    1654:	aa 1f       	adc	r26, r26
    1656:	bb 1f       	adc	r27, r27
    1658:	ee 1f       	adc	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	a2 17       	cp	r26, r18
    165e:	b3 07       	cpc	r27, r19
    1660:	e4 07       	cpc	r30, r20
    1662:	f5 07       	cpc	r31, r21
    1664:	20 f0       	brcs	.+8      	; 0x166e <__udivmodsi4_ep>
    1666:	a2 1b       	sub	r26, r18
    1668:	b3 0b       	sbc	r27, r19
    166a:	e4 0b       	sbc	r30, r20
    166c:	f5 0b       	sbc	r31, r21

0000166e <__udivmodsi4_ep>:
    166e:	66 1f       	adc	r22, r22
    1670:	77 1f       	adc	r23, r23
    1672:	88 1f       	adc	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	1a 94       	dec	r1
    1678:	69 f7       	brne	.-38     	; 0x1654 <__udivmodsi4_loop>
    167a:	60 95       	com	r22
    167c:	70 95       	com	r23
    167e:	80 95       	com	r24
    1680:	90 95       	com	r25
    1682:	9b 01       	movw	r18, r22
    1684:	ac 01       	movw	r20, r24
    1686:	bd 01       	movw	r22, r26
    1688:	cf 01       	movw	r24, r30
    168a:	08 95       	ret

0000168c <__divmodsi4>:
    168c:	05 2e       	mov	r0, r21
    168e:	97 fb       	bst	r25, 7
    1690:	1e f4       	brtc	.+6      	; 0x1698 <__divmodsi4+0xc>
    1692:	00 94       	com	r0
    1694:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__negsi2>
    1698:	57 fd       	sbrc	r21, 7
    169a:	07 d0       	rcall	.+14     	; 0x16aa <__divmodsi4_neg2>
    169c:	0e 94 24 0b 	call	0x1648	; 0x1648 <__udivmodsi4>
    16a0:	07 fc       	sbrc	r0, 7
    16a2:	03 d0       	rcall	.+6      	; 0x16aa <__divmodsi4_neg2>
    16a4:	4e f4       	brtc	.+18     	; 0x16b8 <__divmodsi4_exit>
    16a6:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__negsi2>

000016aa <__divmodsi4_neg2>:
    16aa:	50 95       	com	r21
    16ac:	40 95       	com	r20
    16ae:	30 95       	com	r19
    16b0:	21 95       	neg	r18
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	4f 4f       	sbci	r20, 0xFF	; 255
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255

000016b8 <__divmodsi4_exit>:
    16b8:	08 95       	ret

000016ba <__negsi2>:
    16ba:	90 95       	com	r25
    16bc:	80 95       	com	r24
    16be:	70 95       	com	r23
    16c0:	61 95       	neg	r22
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	8f 4f       	sbci	r24, 0xFF	; 255
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	08 95       	ret

000016ca <__tablejump2__>:
    16ca:	ee 0f       	add	r30, r30
    16cc:	ff 1f       	adc	r31, r31
    16ce:	05 90       	lpm	r0, Z+
    16d0:	f4 91       	lpm	r31, Z
    16d2:	e0 2d       	mov	r30, r0
    16d4:	09 94       	ijmp

000016d6 <__umulhisi3>:
    16d6:	a2 9f       	mul	r26, r18
    16d8:	b0 01       	movw	r22, r0
    16da:	b3 9f       	mul	r27, r19
    16dc:	c0 01       	movw	r24, r0
    16de:	a3 9f       	mul	r26, r19
    16e0:	70 0d       	add	r23, r0
    16e2:	81 1d       	adc	r24, r1
    16e4:	11 24       	eor	r1, r1
    16e6:	91 1d       	adc	r25, r1
    16e8:	b2 9f       	mul	r27, r18
    16ea:	70 0d       	add	r23, r0
    16ec:	81 1d       	adc	r24, r1
    16ee:	11 24       	eor	r1, r1
    16f0:	91 1d       	adc	r25, r1
    16f2:	08 95       	ret

000016f4 <sprintf>:
    16f4:	ae e0       	ldi	r26, 0x0E	; 14
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e0 e8       	ldi	r30, 0x80	; 128
    16fa:	fb e0       	ldi	r31, 0x0B	; 11
    16fc:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__prologue_saves__+0x1c>
    1700:	0d 89       	ldd	r16, Y+21	; 0x15
    1702:	1e 89       	ldd	r17, Y+22	; 0x16
    1704:	86 e0       	ldi	r24, 0x06	; 6
    1706:	8c 83       	std	Y+4, r24	; 0x04
    1708:	1a 83       	std	Y+2, r17	; 0x02
    170a:	09 83       	std	Y+1, r16	; 0x01
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	9f e7       	ldi	r25, 0x7F	; 127
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	ae 01       	movw	r20, r28
    1716:	47 5e       	subi	r20, 0xE7	; 231
    1718:	5f 4f       	sbci	r21, 0xFF	; 255
    171a:	6f 89       	ldd	r22, Y+23	; 0x17
    171c:	78 8d       	ldd	r23, Y+24	; 0x18
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vfprintf>
    1726:	ef 81       	ldd	r30, Y+7	; 0x07
    1728:	f8 85       	ldd	r31, Y+8	; 0x08
    172a:	e0 0f       	add	r30, r16
    172c:	f1 1f       	adc	r31, r17
    172e:	10 82       	st	Z, r1
    1730:	2e 96       	adiw	r28, 0x0e	; 14
    1732:	e4 e0       	ldi	r30, 0x04	; 4
    1734:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__epilogue_restores__+0x1c>

00001738 <vfprintf>:
    1738:	ab e0       	ldi	r26, 0x0B	; 11
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e2 ea       	ldi	r30, 0xA2	; 162
    173e:	fb e0       	ldi	r31, 0x0B	; 11
    1740:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__prologue_saves__>
    1744:	6c 01       	movw	r12, r24
    1746:	7b 01       	movw	r14, r22
    1748:	8a 01       	movw	r16, r20
    174a:	fc 01       	movw	r30, r24
    174c:	17 82       	std	Z+7, r1	; 0x07
    174e:	16 82       	std	Z+6, r1	; 0x06
    1750:	83 81       	ldd	r24, Z+3	; 0x03
    1752:	81 ff       	sbrs	r24, 1
    1754:	cc c1       	rjmp	.+920    	; 0x1aee <vfprintf+0x3b6>
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	3c 01       	movw	r6, r24
    175c:	f6 01       	movw	r30, r12
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	f7 01       	movw	r30, r14
    1762:	93 fd       	sbrc	r25, 3
    1764:	85 91       	lpm	r24, Z+
    1766:	93 ff       	sbrs	r25, 3
    1768:	81 91       	ld	r24, Z+
    176a:	7f 01       	movw	r14, r30
    176c:	88 23       	and	r24, r24
    176e:	09 f4       	brne	.+2      	; 0x1772 <vfprintf+0x3a>
    1770:	ba c1       	rjmp	.+884    	; 0x1ae6 <vfprintf+0x3ae>
    1772:	85 32       	cpi	r24, 0x25	; 37
    1774:	39 f4       	brne	.+14     	; 0x1784 <vfprintf+0x4c>
    1776:	93 fd       	sbrc	r25, 3
    1778:	85 91       	lpm	r24, Z+
    177a:	93 ff       	sbrs	r25, 3
    177c:	81 91       	ld	r24, Z+
    177e:	7f 01       	movw	r14, r30
    1780:	85 32       	cpi	r24, 0x25	; 37
    1782:	29 f4       	brne	.+10     	; 0x178e <vfprintf+0x56>
    1784:	b6 01       	movw	r22, r12
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    178c:	e7 cf       	rjmp	.-50     	; 0x175c <vfprintf+0x24>
    178e:	91 2c       	mov	r9, r1
    1790:	21 2c       	mov	r2, r1
    1792:	31 2c       	mov	r3, r1
    1794:	ff e1       	ldi	r31, 0x1F	; 31
    1796:	f3 15       	cp	r31, r3
    1798:	d8 f0       	brcs	.+54     	; 0x17d0 <vfprintf+0x98>
    179a:	8b 32       	cpi	r24, 0x2B	; 43
    179c:	79 f0       	breq	.+30     	; 0x17bc <vfprintf+0x84>
    179e:	38 f4       	brcc	.+14     	; 0x17ae <vfprintf+0x76>
    17a0:	80 32       	cpi	r24, 0x20	; 32
    17a2:	79 f0       	breq	.+30     	; 0x17c2 <vfprintf+0x8a>
    17a4:	83 32       	cpi	r24, 0x23	; 35
    17a6:	a1 f4       	brne	.+40     	; 0x17d0 <vfprintf+0x98>
    17a8:	23 2d       	mov	r18, r3
    17aa:	20 61       	ori	r18, 0x10	; 16
    17ac:	1d c0       	rjmp	.+58     	; 0x17e8 <vfprintf+0xb0>
    17ae:	8d 32       	cpi	r24, 0x2D	; 45
    17b0:	61 f0       	breq	.+24     	; 0x17ca <vfprintf+0x92>
    17b2:	80 33       	cpi	r24, 0x30	; 48
    17b4:	69 f4       	brne	.+26     	; 0x17d0 <vfprintf+0x98>
    17b6:	23 2d       	mov	r18, r3
    17b8:	21 60       	ori	r18, 0x01	; 1
    17ba:	16 c0       	rjmp	.+44     	; 0x17e8 <vfprintf+0xb0>
    17bc:	83 2d       	mov	r24, r3
    17be:	82 60       	ori	r24, 0x02	; 2
    17c0:	38 2e       	mov	r3, r24
    17c2:	e3 2d       	mov	r30, r3
    17c4:	e4 60       	ori	r30, 0x04	; 4
    17c6:	3e 2e       	mov	r3, r30
    17c8:	2a c0       	rjmp	.+84     	; 0x181e <vfprintf+0xe6>
    17ca:	f3 2d       	mov	r31, r3
    17cc:	f8 60       	ori	r31, 0x08	; 8
    17ce:	1d c0       	rjmp	.+58     	; 0x180a <vfprintf+0xd2>
    17d0:	37 fc       	sbrc	r3, 7
    17d2:	2d c0       	rjmp	.+90     	; 0x182e <vfprintf+0xf6>
    17d4:	20 ed       	ldi	r18, 0xD0	; 208
    17d6:	28 0f       	add	r18, r24
    17d8:	2a 30       	cpi	r18, 0x0A	; 10
    17da:	40 f0       	brcs	.+16     	; 0x17ec <vfprintf+0xb4>
    17dc:	8e 32       	cpi	r24, 0x2E	; 46
    17de:	b9 f4       	brne	.+46     	; 0x180e <vfprintf+0xd6>
    17e0:	36 fc       	sbrc	r3, 6
    17e2:	81 c1       	rjmp	.+770    	; 0x1ae6 <vfprintf+0x3ae>
    17e4:	23 2d       	mov	r18, r3
    17e6:	20 64       	ori	r18, 0x40	; 64
    17e8:	32 2e       	mov	r3, r18
    17ea:	19 c0       	rjmp	.+50     	; 0x181e <vfprintf+0xe6>
    17ec:	36 fe       	sbrs	r3, 6
    17ee:	06 c0       	rjmp	.+12     	; 0x17fc <vfprintf+0xc4>
    17f0:	8a e0       	ldi	r24, 0x0A	; 10
    17f2:	98 9e       	mul	r9, r24
    17f4:	20 0d       	add	r18, r0
    17f6:	11 24       	eor	r1, r1
    17f8:	92 2e       	mov	r9, r18
    17fa:	11 c0       	rjmp	.+34     	; 0x181e <vfprintf+0xe6>
    17fc:	ea e0       	ldi	r30, 0x0A	; 10
    17fe:	2e 9e       	mul	r2, r30
    1800:	20 0d       	add	r18, r0
    1802:	11 24       	eor	r1, r1
    1804:	22 2e       	mov	r2, r18
    1806:	f3 2d       	mov	r31, r3
    1808:	f0 62       	ori	r31, 0x20	; 32
    180a:	3f 2e       	mov	r3, r31
    180c:	08 c0       	rjmp	.+16     	; 0x181e <vfprintf+0xe6>
    180e:	8c 36       	cpi	r24, 0x6C	; 108
    1810:	21 f4       	brne	.+8      	; 0x181a <vfprintf+0xe2>
    1812:	83 2d       	mov	r24, r3
    1814:	80 68       	ori	r24, 0x80	; 128
    1816:	38 2e       	mov	r3, r24
    1818:	02 c0       	rjmp	.+4      	; 0x181e <vfprintf+0xe6>
    181a:	88 36       	cpi	r24, 0x68	; 104
    181c:	41 f4       	brne	.+16     	; 0x182e <vfprintf+0xf6>
    181e:	f7 01       	movw	r30, r14
    1820:	93 fd       	sbrc	r25, 3
    1822:	85 91       	lpm	r24, Z+
    1824:	93 ff       	sbrs	r25, 3
    1826:	81 91       	ld	r24, Z+
    1828:	7f 01       	movw	r14, r30
    182a:	81 11       	cpse	r24, r1
    182c:	b3 cf       	rjmp	.-154    	; 0x1794 <vfprintf+0x5c>
    182e:	98 2f       	mov	r25, r24
    1830:	9f 7d       	andi	r25, 0xDF	; 223
    1832:	95 54       	subi	r25, 0x45	; 69
    1834:	93 30       	cpi	r25, 0x03	; 3
    1836:	28 f4       	brcc	.+10     	; 0x1842 <vfprintf+0x10a>
    1838:	0c 5f       	subi	r16, 0xFC	; 252
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	9f e3       	ldi	r25, 0x3F	; 63
    183e:	99 83       	std	Y+1, r25	; 0x01
    1840:	0d c0       	rjmp	.+26     	; 0x185c <vfprintf+0x124>
    1842:	83 36       	cpi	r24, 0x63	; 99
    1844:	31 f0       	breq	.+12     	; 0x1852 <vfprintf+0x11a>
    1846:	83 37       	cpi	r24, 0x73	; 115
    1848:	71 f0       	breq	.+28     	; 0x1866 <vfprintf+0x12e>
    184a:	83 35       	cpi	r24, 0x53	; 83
    184c:	09 f0       	breq	.+2      	; 0x1850 <vfprintf+0x118>
    184e:	59 c0       	rjmp	.+178    	; 0x1902 <vfprintf+0x1ca>
    1850:	21 c0       	rjmp	.+66     	; 0x1894 <vfprintf+0x15c>
    1852:	f8 01       	movw	r30, r16
    1854:	80 81       	ld	r24, Z
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	0e 5f       	subi	r16, 0xFE	; 254
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	88 24       	eor	r8, r8
    185e:	83 94       	inc	r8
    1860:	91 2c       	mov	r9, r1
    1862:	53 01       	movw	r10, r6
    1864:	13 c0       	rjmp	.+38     	; 0x188c <vfprintf+0x154>
    1866:	28 01       	movw	r4, r16
    1868:	f2 e0       	ldi	r31, 0x02	; 2
    186a:	4f 0e       	add	r4, r31
    186c:	51 1c       	adc	r5, r1
    186e:	f8 01       	movw	r30, r16
    1870:	a0 80       	ld	r10, Z
    1872:	b1 80       	ldd	r11, Z+1	; 0x01
    1874:	36 fe       	sbrs	r3, 6
    1876:	03 c0       	rjmp	.+6      	; 0x187e <vfprintf+0x146>
    1878:	69 2d       	mov	r22, r9
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <vfprintf+0x14a>
    187e:	6f ef       	ldi	r22, 0xFF	; 255
    1880:	7f ef       	ldi	r23, 0xFF	; 255
    1882:	c5 01       	movw	r24, r10
    1884:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <strnlen>
    1888:	4c 01       	movw	r8, r24
    188a:	82 01       	movw	r16, r4
    188c:	f3 2d       	mov	r31, r3
    188e:	ff 77       	andi	r31, 0x7F	; 127
    1890:	3f 2e       	mov	r3, r31
    1892:	16 c0       	rjmp	.+44     	; 0x18c0 <vfprintf+0x188>
    1894:	28 01       	movw	r4, r16
    1896:	22 e0       	ldi	r18, 0x02	; 2
    1898:	42 0e       	add	r4, r18
    189a:	51 1c       	adc	r5, r1
    189c:	f8 01       	movw	r30, r16
    189e:	a0 80       	ld	r10, Z
    18a0:	b1 80       	ldd	r11, Z+1	; 0x01
    18a2:	36 fe       	sbrs	r3, 6
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <vfprintf+0x174>
    18a6:	69 2d       	mov	r22, r9
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x178>
    18ac:	6f ef       	ldi	r22, 0xFF	; 255
    18ae:	7f ef       	ldi	r23, 0xFF	; 255
    18b0:	c5 01       	movw	r24, r10
    18b2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <strnlen_P>
    18b6:	4c 01       	movw	r8, r24
    18b8:	f3 2d       	mov	r31, r3
    18ba:	f0 68       	ori	r31, 0x80	; 128
    18bc:	3f 2e       	mov	r3, r31
    18be:	82 01       	movw	r16, r4
    18c0:	33 fc       	sbrc	r3, 3
    18c2:	1b c0       	rjmp	.+54     	; 0x18fa <vfprintf+0x1c2>
    18c4:	82 2d       	mov	r24, r2
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	88 16       	cp	r8, r24
    18ca:	99 06       	cpc	r9, r25
    18cc:	b0 f4       	brcc	.+44     	; 0x18fa <vfprintf+0x1c2>
    18ce:	b6 01       	movw	r22, r12
    18d0:	80 e2       	ldi	r24, 0x20	; 32
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    18d8:	2a 94       	dec	r2
    18da:	f4 cf       	rjmp	.-24     	; 0x18c4 <vfprintf+0x18c>
    18dc:	f5 01       	movw	r30, r10
    18de:	37 fc       	sbrc	r3, 7
    18e0:	85 91       	lpm	r24, Z+
    18e2:	37 fe       	sbrs	r3, 7
    18e4:	81 91       	ld	r24, Z+
    18e6:	5f 01       	movw	r10, r30
    18e8:	b6 01       	movw	r22, r12
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    18f0:	21 10       	cpse	r2, r1
    18f2:	2a 94       	dec	r2
    18f4:	21 e0       	ldi	r18, 0x01	; 1
    18f6:	82 1a       	sub	r8, r18
    18f8:	91 08       	sbc	r9, r1
    18fa:	81 14       	cp	r8, r1
    18fc:	91 04       	cpc	r9, r1
    18fe:	71 f7       	brne	.-36     	; 0x18dc <vfprintf+0x1a4>
    1900:	e8 c0       	rjmp	.+464    	; 0x1ad2 <vfprintf+0x39a>
    1902:	84 36       	cpi	r24, 0x64	; 100
    1904:	11 f0       	breq	.+4      	; 0x190a <vfprintf+0x1d2>
    1906:	89 36       	cpi	r24, 0x69	; 105
    1908:	41 f5       	brne	.+80     	; 0x195a <vfprintf+0x222>
    190a:	f8 01       	movw	r30, r16
    190c:	37 fe       	sbrs	r3, 7
    190e:	07 c0       	rjmp	.+14     	; 0x191e <vfprintf+0x1e6>
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	0c 5f       	subi	r16, 0xFC	; 252
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	08 c0       	rjmp	.+16     	; 0x192e <vfprintf+0x1f6>
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	07 2e       	mov	r0, r23
    1924:	00 0c       	add	r0, r0
    1926:	88 0b       	sbc	r24, r24
    1928:	99 0b       	sbc	r25, r25
    192a:	0e 5f       	subi	r16, 0xFE	; 254
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	f3 2d       	mov	r31, r3
    1930:	ff 76       	andi	r31, 0x6F	; 111
    1932:	3f 2e       	mov	r3, r31
    1934:	97 ff       	sbrs	r25, 7
    1936:	09 c0       	rjmp	.+18     	; 0x194a <vfprintf+0x212>
    1938:	90 95       	com	r25
    193a:	80 95       	com	r24
    193c:	70 95       	com	r23
    193e:	61 95       	neg	r22
    1940:	7f 4f       	sbci	r23, 0xFF	; 255
    1942:	8f 4f       	sbci	r24, 0xFF	; 255
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	f0 68       	ori	r31, 0x80	; 128
    1948:	3f 2e       	mov	r3, r31
    194a:	2a e0       	ldi	r18, 0x0A	; 10
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	a3 01       	movw	r20, r6
    1950:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__ultoa_invert>
    1954:	88 2e       	mov	r8, r24
    1956:	86 18       	sub	r8, r6
    1958:	45 c0       	rjmp	.+138    	; 0x19e4 <vfprintf+0x2ac>
    195a:	85 37       	cpi	r24, 0x75	; 117
    195c:	31 f4       	brne	.+12     	; 0x196a <vfprintf+0x232>
    195e:	23 2d       	mov	r18, r3
    1960:	2f 7e       	andi	r18, 0xEF	; 239
    1962:	b2 2e       	mov	r11, r18
    1964:	2a e0       	ldi	r18, 0x0A	; 10
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	25 c0       	rjmp	.+74     	; 0x19b4 <vfprintf+0x27c>
    196a:	93 2d       	mov	r25, r3
    196c:	99 7f       	andi	r25, 0xF9	; 249
    196e:	b9 2e       	mov	r11, r25
    1970:	8f 36       	cpi	r24, 0x6F	; 111
    1972:	c1 f0       	breq	.+48     	; 0x19a4 <vfprintf+0x26c>
    1974:	18 f4       	brcc	.+6      	; 0x197c <vfprintf+0x244>
    1976:	88 35       	cpi	r24, 0x58	; 88
    1978:	79 f0       	breq	.+30     	; 0x1998 <vfprintf+0x260>
    197a:	b5 c0       	rjmp	.+362    	; 0x1ae6 <vfprintf+0x3ae>
    197c:	80 37       	cpi	r24, 0x70	; 112
    197e:	19 f0       	breq	.+6      	; 0x1986 <vfprintf+0x24e>
    1980:	88 37       	cpi	r24, 0x78	; 120
    1982:	21 f0       	breq	.+8      	; 0x198c <vfprintf+0x254>
    1984:	b0 c0       	rjmp	.+352    	; 0x1ae6 <vfprintf+0x3ae>
    1986:	e9 2f       	mov	r30, r25
    1988:	e0 61       	ori	r30, 0x10	; 16
    198a:	be 2e       	mov	r11, r30
    198c:	b4 fe       	sbrs	r11, 4
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <vfprintf+0x272>
    1990:	fb 2d       	mov	r31, r11
    1992:	f4 60       	ori	r31, 0x04	; 4
    1994:	bf 2e       	mov	r11, r31
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <vfprintf+0x272>
    1998:	34 fe       	sbrs	r3, 4
    199a:	0a c0       	rjmp	.+20     	; 0x19b0 <vfprintf+0x278>
    199c:	29 2f       	mov	r18, r25
    199e:	26 60       	ori	r18, 0x06	; 6
    19a0:	b2 2e       	mov	r11, r18
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <vfprintf+0x278>
    19a4:	28 e0       	ldi	r18, 0x08	; 8
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <vfprintf+0x27c>
    19aa:	20 e1       	ldi	r18, 0x10	; 16
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <vfprintf+0x27c>
    19b0:	20 e1       	ldi	r18, 0x10	; 16
    19b2:	32 e0       	ldi	r19, 0x02	; 2
    19b4:	f8 01       	movw	r30, r16
    19b6:	b7 fe       	sbrs	r11, 7
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <vfprintf+0x290>
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	0c 5f       	subi	r16, 0xFC	; 252
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <vfprintf+0x29c>
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 5f       	subi	r16, 0xFE	; 254
    19d2:	1f 4f       	sbci	r17, 0xFF	; 255
    19d4:	a3 01       	movw	r20, r6
    19d6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__ultoa_invert>
    19da:	88 2e       	mov	r8, r24
    19dc:	86 18       	sub	r8, r6
    19de:	fb 2d       	mov	r31, r11
    19e0:	ff 77       	andi	r31, 0x7F	; 127
    19e2:	3f 2e       	mov	r3, r31
    19e4:	36 fe       	sbrs	r3, 6
    19e6:	0d c0       	rjmp	.+26     	; 0x1a02 <vfprintf+0x2ca>
    19e8:	23 2d       	mov	r18, r3
    19ea:	2e 7f       	andi	r18, 0xFE	; 254
    19ec:	a2 2e       	mov	r10, r18
    19ee:	89 14       	cp	r8, r9
    19f0:	58 f4       	brcc	.+22     	; 0x1a08 <vfprintf+0x2d0>
    19f2:	34 fe       	sbrs	r3, 4
    19f4:	0b c0       	rjmp	.+22     	; 0x1a0c <vfprintf+0x2d4>
    19f6:	32 fc       	sbrc	r3, 2
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <vfprintf+0x2d4>
    19fa:	83 2d       	mov	r24, r3
    19fc:	8e 7e       	andi	r24, 0xEE	; 238
    19fe:	a8 2e       	mov	r10, r24
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <vfprintf+0x2d4>
    1a02:	b8 2c       	mov	r11, r8
    1a04:	a3 2c       	mov	r10, r3
    1a06:	03 c0       	rjmp	.+6      	; 0x1a0e <vfprintf+0x2d6>
    1a08:	b8 2c       	mov	r11, r8
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <vfprintf+0x2d6>
    1a0c:	b9 2c       	mov	r11, r9
    1a0e:	a4 fe       	sbrs	r10, 4
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <vfprintf+0x2f8>
    1a12:	fe 01       	movw	r30, r28
    1a14:	e8 0d       	add	r30, r8
    1a16:	f1 1d       	adc	r31, r1
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 33       	cpi	r24, 0x30	; 48
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <vfprintf+0x2ee>
    1a1e:	9a 2d       	mov	r25, r10
    1a20:	99 7e       	andi	r25, 0xE9	; 233
    1a22:	a9 2e       	mov	r10, r25
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <vfprintf+0x300>
    1a26:	a2 fe       	sbrs	r10, 2
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <vfprintf+0x2fe>
    1a2a:	b3 94       	inc	r11
    1a2c:	b3 94       	inc	r11
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <vfprintf+0x300>
    1a30:	8a 2d       	mov	r24, r10
    1a32:	86 78       	andi	r24, 0x86	; 134
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <vfprintf+0x300>
    1a36:	b3 94       	inc	r11
    1a38:	a3 fc       	sbrc	r10, 3
    1a3a:	11 c0       	rjmp	.+34     	; 0x1a5e <vfprintf+0x326>
    1a3c:	a0 fe       	sbrs	r10, 0
    1a3e:	06 c0       	rjmp	.+12     	; 0x1a4c <vfprintf+0x314>
    1a40:	b2 14       	cp	r11, r2
    1a42:	88 f4       	brcc	.+34     	; 0x1a66 <vfprintf+0x32e>
    1a44:	28 0c       	add	r2, r8
    1a46:	92 2c       	mov	r9, r2
    1a48:	9b 18       	sub	r9, r11
    1a4a:	0e c0       	rjmp	.+28     	; 0x1a68 <vfprintf+0x330>
    1a4c:	b2 14       	cp	r11, r2
    1a4e:	60 f4       	brcc	.+24     	; 0x1a68 <vfprintf+0x330>
    1a50:	b6 01       	movw	r22, r12
    1a52:	80 e2       	ldi	r24, 0x20	; 32
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    1a5a:	b3 94       	inc	r11
    1a5c:	f7 cf       	rjmp	.-18     	; 0x1a4c <vfprintf+0x314>
    1a5e:	b2 14       	cp	r11, r2
    1a60:	18 f4       	brcc	.+6      	; 0x1a68 <vfprintf+0x330>
    1a62:	2b 18       	sub	r2, r11
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <vfprintf+0x332>
    1a66:	98 2c       	mov	r9, r8
    1a68:	21 2c       	mov	r2, r1
    1a6a:	a4 fe       	sbrs	r10, 4
    1a6c:	10 c0       	rjmp	.+32     	; 0x1a8e <vfprintf+0x356>
    1a6e:	b6 01       	movw	r22, r12
    1a70:	80 e3       	ldi	r24, 0x30	; 48
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    1a78:	a2 fe       	sbrs	r10, 2
    1a7a:	17 c0       	rjmp	.+46     	; 0x1aaa <vfprintf+0x372>
    1a7c:	a1 fc       	sbrc	r10, 1
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <vfprintf+0x34e>
    1a80:	88 e7       	ldi	r24, 0x78	; 120
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <vfprintf+0x352>
    1a86:	88 e5       	ldi	r24, 0x58	; 88
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	0c c0       	rjmp	.+24     	; 0x1aa6 <vfprintf+0x36e>
    1a8e:	8a 2d       	mov	r24, r10
    1a90:	86 78       	andi	r24, 0x86	; 134
    1a92:	59 f0       	breq	.+22     	; 0x1aaa <vfprintf+0x372>
    1a94:	a1 fe       	sbrs	r10, 1
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <vfprintf+0x364>
    1a98:	8b e2       	ldi	r24, 0x2B	; 43
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <vfprintf+0x366>
    1a9c:	80 e2       	ldi	r24, 0x20	; 32
    1a9e:	a7 fc       	sbrc	r10, 7
    1aa0:	8d e2       	ldi	r24, 0x2D	; 45
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    1aaa:	89 14       	cp	r8, r9
    1aac:	38 f4       	brcc	.+14     	; 0x1abc <vfprintf+0x384>
    1aae:	b6 01       	movw	r22, r12
    1ab0:	80 e3       	ldi	r24, 0x30	; 48
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    1ab8:	9a 94       	dec	r9
    1aba:	f7 cf       	rjmp	.-18     	; 0x1aaa <vfprintf+0x372>
    1abc:	8a 94       	dec	r8
    1abe:	f3 01       	movw	r30, r6
    1ac0:	e8 0d       	add	r30, r8
    1ac2:	f1 1d       	adc	r31, r1
    1ac4:	80 81       	ld	r24, Z
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    1ace:	81 10       	cpse	r8, r1
    1ad0:	f5 cf       	rjmp	.-22     	; 0x1abc <vfprintf+0x384>
    1ad2:	22 20       	and	r2, r2
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <vfprintf+0x3a0>
    1ad6:	42 ce       	rjmp	.-892    	; 0x175c <vfprintf+0x24>
    1ad8:	b6 01       	movw	r22, r12
    1ada:	80 e2       	ldi	r24, 0x20	; 32
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <fputc>
    1ae2:	2a 94       	dec	r2
    1ae4:	f6 cf       	rjmp	.-20     	; 0x1ad2 <vfprintf+0x39a>
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	86 81       	ldd	r24, Z+6	; 0x06
    1aea:	97 81       	ldd	r25, Z+7	; 0x07
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <vfprintf+0x3ba>
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	9f ef       	ldi	r25, 0xFF	; 255
    1af2:	2b 96       	adiw	r28, 0x0b	; 11
    1af4:	e2 e1       	ldi	r30, 0x12	; 18
    1af6:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__epilogue_restores__>

00001afa <strnlen_P>:
    1afa:	fc 01       	movw	r30, r24
    1afc:	05 90       	lpm	r0, Z+
    1afe:	61 50       	subi	r22, 0x01	; 1
    1b00:	70 40       	sbci	r23, 0x00	; 0
    1b02:	01 10       	cpse	r0, r1
    1b04:	d8 f7       	brcc	.-10     	; 0x1afc <strnlen_P+0x2>
    1b06:	80 95       	com	r24
    1b08:	90 95       	com	r25
    1b0a:	8e 0f       	add	r24, r30
    1b0c:	9f 1f       	adc	r25, r31
    1b0e:	08 95       	ret

00001b10 <strnlen>:
    1b10:	fc 01       	movw	r30, r24
    1b12:	61 50       	subi	r22, 0x01	; 1
    1b14:	70 40       	sbci	r23, 0x00	; 0
    1b16:	01 90       	ld	r0, Z+
    1b18:	01 10       	cpse	r0, r1
    1b1a:	d8 f7       	brcc	.-10     	; 0x1b12 <strnlen+0x2>
    1b1c:	80 95       	com	r24
    1b1e:	90 95       	com	r25
    1b20:	8e 0f       	add	r24, r30
    1b22:	9f 1f       	adc	r25, r31
    1b24:	08 95       	ret

00001b26 <fputc>:
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	fb 01       	movw	r30, r22
    1b30:	23 81       	ldd	r18, Z+3	; 0x03
    1b32:	21 fd       	sbrc	r18, 1
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <fputc+0x16>
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	9f ef       	ldi	r25, 0xFF	; 255
    1b3a:	2c c0       	rjmp	.+88     	; 0x1b94 <fputc+0x6e>
    1b3c:	22 ff       	sbrs	r18, 2
    1b3e:	16 c0       	rjmp	.+44     	; 0x1b6c <fputc+0x46>
    1b40:	46 81       	ldd	r20, Z+6	; 0x06
    1b42:	57 81       	ldd	r21, Z+7	; 0x07
    1b44:	24 81       	ldd	r18, Z+4	; 0x04
    1b46:	35 81       	ldd	r19, Z+5	; 0x05
    1b48:	42 17       	cp	r20, r18
    1b4a:	53 07       	cpc	r21, r19
    1b4c:	44 f4       	brge	.+16     	; 0x1b5e <fputc+0x38>
    1b4e:	a0 81       	ld	r26, Z
    1b50:	b1 81       	ldd	r27, Z+1	; 0x01
    1b52:	9d 01       	movw	r18, r26
    1b54:	2f 5f       	subi	r18, 0xFF	; 255
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	31 83       	std	Z+1, r19	; 0x01
    1b5a:	20 83       	st	Z, r18
    1b5c:	8c 93       	st	X, r24
    1b5e:	26 81       	ldd	r18, Z+6	; 0x06
    1b60:	37 81       	ldd	r19, Z+7	; 0x07
    1b62:	2f 5f       	subi	r18, 0xFF	; 255
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	37 83       	std	Z+7, r19	; 0x07
    1b68:	26 83       	std	Z+6, r18	; 0x06
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <fputc+0x6e>
    1b6c:	8b 01       	movw	r16, r22
    1b6e:	ec 01       	movw	r28, r24
    1b70:	fb 01       	movw	r30, r22
    1b72:	00 84       	ldd	r0, Z+8	; 0x08
    1b74:	f1 85       	ldd	r31, Z+9	; 0x09
    1b76:	e0 2d       	mov	r30, r0
    1b78:	09 95       	icall
    1b7a:	89 2b       	or	r24, r25
    1b7c:	e1 f6       	brne	.-72     	; 0x1b36 <fputc+0x10>
    1b7e:	d8 01       	movw	r26, r16
    1b80:	16 96       	adiw	r26, 0x06	; 6
    1b82:	8d 91       	ld	r24, X+
    1b84:	9c 91       	ld	r25, X
    1b86:	17 97       	sbiw	r26, 0x07	; 7
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	17 96       	adiw	r26, 0x07	; 7
    1b8c:	9c 93       	st	X, r25
    1b8e:	8e 93       	st	-X, r24
    1b90:	16 97       	sbiw	r26, 0x06	; 6
    1b92:	ce 01       	movw	r24, r28
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	08 95       	ret

00001b9e <__ultoa_invert>:
    1b9e:	fa 01       	movw	r30, r20
    1ba0:	aa 27       	eor	r26, r26
    1ba2:	28 30       	cpi	r18, 0x08	; 8
    1ba4:	51 f1       	breq	.+84     	; 0x1bfa <__ultoa_invert+0x5c>
    1ba6:	20 31       	cpi	r18, 0x10	; 16
    1ba8:	81 f1       	breq	.+96     	; 0x1c0a <__ultoa_invert+0x6c>
    1baa:	e8 94       	clt
    1bac:	6f 93       	push	r22
    1bae:	6e 7f       	andi	r22, 0xFE	; 254
    1bb0:	6e 5f       	subi	r22, 0xFE	; 254
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	af 4f       	sbci	r26, 0xFF	; 255
    1bba:	b1 e0       	ldi	r27, 0x01	; 1
    1bbc:	3e d0       	rcall	.+124    	; 0x1c3a <__ultoa_invert+0x9c>
    1bbe:	b4 e0       	ldi	r27, 0x04	; 4
    1bc0:	3c d0       	rcall	.+120    	; 0x1c3a <__ultoa_invert+0x9c>
    1bc2:	67 0f       	add	r22, r23
    1bc4:	78 1f       	adc	r23, r24
    1bc6:	89 1f       	adc	r24, r25
    1bc8:	9a 1f       	adc	r25, r26
    1bca:	a1 1d       	adc	r26, r1
    1bcc:	68 0f       	add	r22, r24
    1bce:	79 1f       	adc	r23, r25
    1bd0:	8a 1f       	adc	r24, r26
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	a1 1d       	adc	r26, r1
    1bd6:	6a 0f       	add	r22, r26
    1bd8:	71 1d       	adc	r23, r1
    1bda:	81 1d       	adc	r24, r1
    1bdc:	91 1d       	adc	r25, r1
    1bde:	a1 1d       	adc	r26, r1
    1be0:	20 d0       	rcall	.+64     	; 0x1c22 <__ultoa_invert+0x84>
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <__ultoa_invert+0x48>
    1be4:	68 94       	set
    1be6:	3f 91       	pop	r19
    1be8:	2a e0       	ldi	r18, 0x0A	; 10
    1bea:	26 9f       	mul	r18, r22
    1bec:	11 24       	eor	r1, r1
    1bee:	30 19       	sub	r19, r0
    1bf0:	30 5d       	subi	r19, 0xD0	; 208
    1bf2:	31 93       	st	Z+, r19
    1bf4:	de f6       	brtc	.-74     	; 0x1bac <__ultoa_invert+0xe>
    1bf6:	cf 01       	movw	r24, r30
    1bf8:	08 95       	ret
    1bfa:	46 2f       	mov	r20, r22
    1bfc:	47 70       	andi	r20, 0x07	; 7
    1bfe:	40 5d       	subi	r20, 0xD0	; 208
    1c00:	41 93       	st	Z+, r20
    1c02:	b3 e0       	ldi	r27, 0x03	; 3
    1c04:	0f d0       	rcall	.+30     	; 0x1c24 <__ultoa_invert+0x86>
    1c06:	c9 f7       	brne	.-14     	; 0x1bfa <__ultoa_invert+0x5c>
    1c08:	f6 cf       	rjmp	.-20     	; 0x1bf6 <__ultoa_invert+0x58>
    1c0a:	46 2f       	mov	r20, r22
    1c0c:	4f 70       	andi	r20, 0x0F	; 15
    1c0e:	40 5d       	subi	r20, 0xD0	; 208
    1c10:	4a 33       	cpi	r20, 0x3A	; 58
    1c12:	18 f0       	brcs	.+6      	; 0x1c1a <__ultoa_invert+0x7c>
    1c14:	49 5d       	subi	r20, 0xD9	; 217
    1c16:	31 fd       	sbrc	r19, 1
    1c18:	40 52       	subi	r20, 0x20	; 32
    1c1a:	41 93       	st	Z+, r20
    1c1c:	02 d0       	rcall	.+4      	; 0x1c22 <__ultoa_invert+0x84>
    1c1e:	a9 f7       	brne	.-22     	; 0x1c0a <__ultoa_invert+0x6c>
    1c20:	ea cf       	rjmp	.-44     	; 0x1bf6 <__ultoa_invert+0x58>
    1c22:	b4 e0       	ldi	r27, 0x04	; 4
    1c24:	a6 95       	lsr	r26
    1c26:	97 95       	ror	r25
    1c28:	87 95       	ror	r24
    1c2a:	77 95       	ror	r23
    1c2c:	67 95       	ror	r22
    1c2e:	ba 95       	dec	r27
    1c30:	c9 f7       	brne	.-14     	; 0x1c24 <__ultoa_invert+0x86>
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	61 05       	cpc	r22, r1
    1c36:	71 05       	cpc	r23, r1
    1c38:	08 95       	ret
    1c3a:	9b 01       	movw	r18, r22
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	0a 2e       	mov	r0, r26
    1c40:	06 94       	lsr	r0
    1c42:	57 95       	ror	r21
    1c44:	47 95       	ror	r20
    1c46:	37 95       	ror	r19
    1c48:	27 95       	ror	r18
    1c4a:	ba 95       	dec	r27
    1c4c:	c9 f7       	brne	.-14     	; 0x1c40 <__ultoa_invert+0xa2>
    1c4e:	62 0f       	add	r22, r18
    1c50:	73 1f       	adc	r23, r19
    1c52:	84 1f       	adc	r24, r20
    1c54:	95 1f       	adc	r25, r21
    1c56:	a0 1d       	adc	r26, r0
    1c58:	08 95       	ret

00001c5a <__prologue_saves__>:
    1c5a:	2f 92       	push	r2
    1c5c:	3f 92       	push	r3
    1c5e:	4f 92       	push	r4
    1c60:	5f 92       	push	r5
    1c62:	6f 92       	push	r6
    1c64:	7f 92       	push	r7
    1c66:	8f 92       	push	r8
    1c68:	9f 92       	push	r9
    1c6a:	af 92       	push	r10
    1c6c:	bf 92       	push	r11
    1c6e:	cf 92       	push	r12
    1c70:	df 92       	push	r13
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	ca 1b       	sub	r28, r26
    1c84:	db 0b       	sbc	r29, r27
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	09 94       	ijmp

00001c92 <__epilogue_restores__>:
    1c92:	2a 88       	ldd	r2, Y+18	; 0x12
    1c94:	39 88       	ldd	r3, Y+17	; 0x11
    1c96:	48 88       	ldd	r4, Y+16	; 0x10
    1c98:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ca0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ca2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ca4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ca6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ca8:	df 80       	ldd	r13, Y+7	; 0x07
    1caa:	ee 80       	ldd	r14, Y+6	; 0x06
    1cac:	fd 80       	ldd	r15, Y+5	; 0x05
    1cae:	0c 81       	ldd	r16, Y+4	; 0x04
    1cb0:	1b 81       	ldd	r17, Y+3	; 0x03
    1cb2:	aa 81       	ldd	r26, Y+2	; 0x02
    1cb4:	b9 81       	ldd	r27, Y+1	; 0x01
    1cb6:	ce 0f       	add	r28, r30
    1cb8:	d1 1d       	adc	r29, r1
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	ed 01       	movw	r28, r26
    1cc6:	08 95       	ret

00001cc8 <_exit>:
    1cc8:	f8 94       	cli

00001cca <__stop_program>:
    1cca:	ff cf       	rjmp	.-2      	; 0x1cca <__stop_program>
